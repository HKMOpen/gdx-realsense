/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.realsense;

public class PXCPowerState extends PXCBase {
  private long swigCPtr;

  protected PXCPowerState(long cPtr, boolean cMemoryOwn) {
    super(realsenseJNI.PXCPowerState_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PXCPowerState obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public PXCPowerState.State QueryState() {
    return PXCPowerState.State.swigToEnum(realsenseJNI.PXCPowerState_QueryState(swigCPtr, this));
  }

  public pxcStatus SetState(PXCPowerState.State state) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCPowerState_SetState(swigCPtr, this, state.swigValue()));
  }

  public final static int CUID = realsenseJNI.PXCPowerState_CUID_get();

  public final static class State {
    public final static PXCPowerState.State STATE_PERFORMANCE = new PXCPowerState.State("STATE_PERFORMANCE");
    public final static PXCPowerState.State STATE_BATTERY = new PXCPowerState.State("STATE_BATTERY");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static State swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + State.class + " with value " + swigValue);
    }

    private State(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private State(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private State(String swigName, State swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static State[] swigValues = { STATE_PERFORMANCE, STATE_BATTERY };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
