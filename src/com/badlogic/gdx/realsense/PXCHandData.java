/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.realsense;

public class PXCHandData extends PXCBase {
  private long swigCPtr;

  protected PXCHandData(long cPtr, boolean cMemoryOwn) {
    super(realsenseJNI.PXCHandData_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PXCHandData obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  static public class JointData {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected JointData(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(JointData obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          realsenseJNI.delete_PXCHandData_JointData(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setConfidence(int value) {
      realsenseJNI.PXCHandData_JointData_confidence_set(swigCPtr, this, value);
    }
  
    public int getConfidence() {
      return realsenseJNI.PXCHandData_JointData_confidence_get(swigCPtr, this);
    }
  
    public void setPositionWorld(PXCPoint3DF32 value) {
      realsenseJNI.PXCHandData_JointData_positionWorld_set(swigCPtr, this, PXCPoint3DF32.getCPtr(value), value);
    }
  
    public PXCPoint3DF32 getPositionWorld() {
      long cPtr = realsenseJNI.PXCHandData_JointData_positionWorld_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCPoint3DF32(cPtr, false);
    }
  
    public void setPositionImage(PXCPoint3DF32 value) {
      realsenseJNI.PXCHandData_JointData_positionImage_set(swigCPtr, this, PXCPoint3DF32.getCPtr(value), value);
    }
  
    public PXCPoint3DF32 getPositionImage() {
      long cPtr = realsenseJNI.PXCHandData_JointData_positionImage_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCPoint3DF32(cPtr, false);
    }
  
    public void setLocalRotation(PXCPoint4DF32 value) {
      realsenseJNI.PXCHandData_JointData_localRotation_set(swigCPtr, this, PXCPoint4DF32.getCPtr(value), value);
    }
  
    public PXCPoint4DF32 getLocalRotation() {
      long cPtr = realsenseJNI.PXCHandData_JointData_localRotation_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCPoint4DF32(cPtr, false);
    }
  
    public void setGlobalOrientation(PXCPoint4DF32 value) {
      realsenseJNI.PXCHandData_JointData_globalOrientation_set(swigCPtr, this, PXCPoint4DF32.getCPtr(value), value);
    }
  
    public PXCPoint4DF32 getGlobalOrientation() {
      long cPtr = realsenseJNI.PXCHandData_JointData_globalOrientation_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCPoint4DF32(cPtr, false);
    }
  
    public void setSpeed(PXCPoint3DF32 value) {
      realsenseJNI.PXCHandData_JointData_speed_set(swigCPtr, this, PXCPoint3DF32.getCPtr(value), value);
    }
  
    public PXCPoint3DF32 getSpeed() {
      long cPtr = realsenseJNI.PXCHandData_JointData_speed_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCPoint3DF32(cPtr, false);
    }
  
    public JointData() {
      this(realsenseJNI.new_PXCHandData_JointData(), true);
    }
  
  }

  static public class ExtremityData {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected ExtremityData(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(ExtremityData obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          realsenseJNI.delete_PXCHandData_ExtremityData(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setPointWorld(PXCPoint3DF32 value) {
      realsenseJNI.PXCHandData_ExtremityData_pointWorld_set(swigCPtr, this, PXCPoint3DF32.getCPtr(value), value);
    }
  
    public PXCPoint3DF32 getPointWorld() {
      long cPtr = realsenseJNI.PXCHandData_ExtremityData_pointWorld_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCPoint3DF32(cPtr, false);
    }
  
    public void setPointImage(PXCPoint3DF32 value) {
      realsenseJNI.PXCHandData_ExtremityData_pointImage_set(swigCPtr, this, PXCPoint3DF32.getCPtr(value), value);
    }
  
    public PXCPoint3DF32 getPointImage() {
      long cPtr = realsenseJNI.PXCHandData_ExtremityData_pointImage_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCPoint3DF32(cPtr, false);
    }
  
    public ExtremityData() {
      this(realsenseJNI.new_PXCHandData_ExtremityData(), true);
    }
  
  }

  static public class FingerData {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected FingerData(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(FingerData obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          realsenseJNI.delete_PXCHandData_FingerData(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setFoldedness(int value) {
      realsenseJNI.PXCHandData_FingerData_foldedness_set(swigCPtr, this, value);
    }
  
    public int getFoldedness() {
      return realsenseJNI.PXCHandData_FingerData_foldedness_get(swigCPtr, this);
    }
  
    public void setRadius(float value) {
      realsenseJNI.PXCHandData_FingerData_radius_set(swigCPtr, this, value);
    }
  
    public float getRadius() {
      return realsenseJNI.PXCHandData_FingerData_radius_get(swigCPtr, this);
    }
  
    public FingerData() {
      this(realsenseJNI.new_PXCHandData_FingerData(), true);
    }
  
  }

  static public class AlertData {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected AlertData(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(AlertData obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          realsenseJNI.delete_PXCHandData_AlertData(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setLabel(PXCHandData.AlertType value) {
      realsenseJNI.PXCHandData_AlertData_label_set(swigCPtr, this, value.swigValue());
    }
  
    public PXCHandData.AlertType getLabel() {
      return PXCHandData.AlertType.swigToEnum(realsenseJNI.PXCHandData_AlertData_label_get(swigCPtr, this));
    }
  
    public void setHandId(int value) {
      realsenseJNI.PXCHandData_AlertData_handId_set(swigCPtr, this, value);
    }
  
    public int getHandId() {
      return realsenseJNI.PXCHandData_AlertData_handId_get(swigCPtr, this);
    }
  
    public void setTimeStamp(SWIGTYPE_p___int64 value) {
      realsenseJNI.PXCHandData_AlertData_timeStamp_set(swigCPtr, this, SWIGTYPE_p___int64.getCPtr(value));
    }
  
    public SWIGTYPE_p___int64 getTimeStamp() {
      return new SWIGTYPE_p___int64(realsenseJNI.PXCHandData_AlertData_timeStamp_get(swigCPtr, this), true);
    }
  
    public void setFrameNumber(int value) {
      realsenseJNI.PXCHandData_AlertData_frameNumber_set(swigCPtr, this, value);
    }
  
    public int getFrameNumber() {
      return realsenseJNI.PXCHandData_AlertData_frameNumber_get(swigCPtr, this);
    }
  
    public AlertData() {
      this(realsenseJNI.new_PXCHandData_AlertData(), true);
    }
  
  }

  static public class GestureData {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected GestureData(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(GestureData obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          realsenseJNI.delete_PXCHandData_GestureData(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setTimeStamp(SWIGTYPE_p___int64 value) {
      realsenseJNI.PXCHandData_GestureData_timeStamp_set(swigCPtr, this, SWIGTYPE_p___int64.getCPtr(value));
    }
  
    public SWIGTYPE_p___int64 getTimeStamp() {
      return new SWIGTYPE_p___int64(realsenseJNI.PXCHandData_GestureData_timeStamp_get(swigCPtr, this), true);
    }
  
    public void setHandId(int value) {
      realsenseJNI.PXCHandData_GestureData_handId_set(swigCPtr, this, value);
    }
  
    public int getHandId() {
      return realsenseJNI.PXCHandData_GestureData_handId_get(swigCPtr, this);
    }
  
    public void setState(PXCHandData.GestureStateType value) {
      realsenseJNI.PXCHandData_GestureData_state_set(swigCPtr, this, value.swigValue());
    }
  
    public PXCHandData.GestureStateType getState() {
      return PXCHandData.GestureStateType.swigToEnum(realsenseJNI.PXCHandData_GestureData_state_get(swigCPtr, this));
    }
  
    public void setFrameNumber(int value) {
      realsenseJNI.PXCHandData_GestureData_frameNumber_set(swigCPtr, this, value);
    }
  
    public int getFrameNumber() {
      return realsenseJNI.PXCHandData_GestureData_frameNumber_get(swigCPtr, this);
    }
  
    public void setName(SWIGTYPE_p_wchar_t value) {
      realsenseJNI.PXCHandData_GestureData_name_set(swigCPtr, this, SWIGTYPE_p_wchar_t.getCPtr(value));
    }
  
    public SWIGTYPE_p_wchar_t getName() {
      long cPtr = realsenseJNI.PXCHandData_GestureData_name_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    }
  
    public String GetCName() {
      return realsenseJNI.PXCHandData_GestureData_GetCName(swigCPtr, this);
    }
  
    public GestureData() {
      this(realsenseJNI.new_PXCHandData_GestureData(), true);
    }
  
  }

  static public class IHand {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected IHand(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(IHand obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          realsenseJNI.delete_PXCHandData_IHand(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public int QueryUniqueId() {
      return realsenseJNI.PXCHandData_IHand_QueryUniqueId(swigCPtr, this);
    }
  
    public int QueryUserId() {
      return realsenseJNI.PXCHandData_IHand_QueryUserId(swigCPtr, this);
    }
  
    public SWIGTYPE_p___int64 QueryTimeStamp() {
      return new SWIGTYPE_p___int64(realsenseJNI.PXCHandData_IHand_QueryTimeStamp(swigCPtr, this), true);
    }
  
    public int IsCalibrated() {
      return realsenseJNI.PXCHandData_IHand_IsCalibrated(swigCPtr, this);
    }
  
    public PXCHandData.BodySideType QueryBodySide() {
      return PXCHandData.BodySideType.swigToEnum(realsenseJNI.PXCHandData_IHand_QueryBodySide(swigCPtr, this));
    }
  
    public PXCRectI32 QueryBoundingBoxImage() {
      return new PXCRectI32(realsenseJNI.PXCHandData_IHand_QueryBoundingBoxImage(swigCPtr, this), false);
    }
  
    public PXCPointF32 QueryMassCenterImage() {
      return new PXCPointF32(realsenseJNI.PXCHandData_IHand_QueryMassCenterImage(swigCPtr, this), false);
    }
  
    public PXCPoint3DF32 QueryMassCenterWorld() {
      return new PXCPoint3DF32(realsenseJNI.PXCHandData_IHand_QueryMassCenterWorld(swigCPtr, this), false);
    }
  
    public PXCPoint4DF32 QueryPalmOrientation() {
      return new PXCPoint4DF32(realsenseJNI.PXCHandData_IHand_QueryPalmOrientation(swigCPtr, this), false);
    }
  
    public int QueryOpenness() {
      return realsenseJNI.PXCHandData_IHand_QueryOpenness(swigCPtr, this);
    }
  
    public pxcStatus QueryExtremityPoint(PXCHandData.ExtremityType extremityLabel, PXCHandData.ExtremityData extremityPoint) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCHandData_IHand_QueryExtremityPoint(swigCPtr, this, extremityLabel.swigValue(), PXCHandData.ExtremityData.getCPtr(extremityPoint), extremityPoint));
    }
  
    public pxcStatus QueryFingerData(PXCHandData.FingerType fingerLabel, PXCHandData.FingerData fingerData) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCHandData_IHand_QueryFingerData(swigCPtr, this, fingerLabel.swigValue(), PXCHandData.FingerData.getCPtr(fingerData), fingerData));
    }
  
    public pxcStatus QueryTrackedJoint(PXCHandData.JointType jointLabel, PXCHandData.JointData jointData) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCHandData_IHand_QueryTrackedJoint(swigCPtr, this, jointLabel.swigValue(), PXCHandData.JointData.getCPtr(jointData), jointData));
    }
  
    public pxcStatus QueryNormalizedJoint(PXCHandData.JointType jointLabel, PXCHandData.JointData jointData) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCHandData_IHand_QueryNormalizedJoint(swigCPtr, this, jointLabel.swigValue(), PXCHandData.JointData.getCPtr(jointData), jointData));
    }
  
    public pxcStatus QuerySegmentationImage(SWIGTYPE_p_p_PXCImage image) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCHandData_IHand_QuerySegmentationImage(swigCPtr, this, SWIGTYPE_p_p_PXCImage.getCPtr(image)));
    }
  
    public int HasTrackedJoints() {
      return realsenseJNI.PXCHandData_IHand_HasTrackedJoints(swigCPtr, this);
    }
  
    public int HasNormalizedJoints() {
      return realsenseJNI.PXCHandData_IHand_HasNormalizedJoints(swigCPtr, this);
    }
  
    public int HasSegmentationImage() {
      return realsenseJNI.PXCHandData_IHand_HasSegmentationImage(swigCPtr, this);
    }
  
  }

  public pxcStatus Update() {
    return pxcStatus.swigToEnum(realsenseJNI.PXCHandData_Update(swigCPtr, this));
  }

  public int QueryFiredAlertsNumber() {
    return realsenseJNI.PXCHandData_QueryFiredAlertsNumber(swigCPtr, this);
  }

  public pxcStatus QueryFiredAlertData(int index, PXCHandData.AlertData alertData) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCHandData_QueryFiredAlertData(swigCPtr, this, index, PXCHandData.AlertData.getCPtr(alertData), alertData));
  }

  public int IsAlertFired(PXCHandData.AlertType alertEvent, PXCHandData.AlertData alertData) {
    return realsenseJNI.PXCHandData_IsAlertFired(swigCPtr, this, alertEvent.swigValue(), PXCHandData.AlertData.getCPtr(alertData), alertData);
  }

  public int IsAlertFiredByHand(PXCHandData.AlertType alertEvent, int handID, PXCHandData.AlertData alertData) {
    return realsenseJNI.PXCHandData_IsAlertFiredByHand(swigCPtr, this, alertEvent.swigValue(), handID, PXCHandData.AlertData.getCPtr(alertData), alertData);
  }

  public int QueryFiredGesturesNumber() {
    return realsenseJNI.PXCHandData_QueryFiredGesturesNumber(swigCPtr, this);
  }

  public pxcStatus QueryFiredGestureData(int index, PXCHandData.GestureData gestureData) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCHandData_QueryFiredGestureData(swigCPtr, this, index, PXCHandData.GestureData.getCPtr(gestureData), gestureData));
  }

  public int IsGestureFired(String gestureName, PXCHandData.GestureData gestureData) {
    return realsenseJNI.PXCHandData_IsGestureFired(swigCPtr, this, gestureName, PXCHandData.GestureData.getCPtr(gestureData), gestureData);
  }

  public int IsGestureFiredByHand(String gestureName, int handID, PXCHandData.GestureData gestureData) {
    return realsenseJNI.PXCHandData_IsGestureFiredByHand(swigCPtr, this, gestureName, handID, PXCHandData.GestureData.getCPtr(gestureData), gestureData);
  }

  public int QueryNumberOfHands() {
    return realsenseJNI.PXCHandData_QueryNumberOfHands(swigCPtr, this);
  }

  public pxcStatus QueryHandId(PXCHandData.AccessOrderType accessOrder, int index, SWIGTYPE_p_int handId) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCHandData_QueryHandId(swigCPtr, this, accessOrder.swigValue(), index, SWIGTYPE_p_int.getCPtr(handId)));
  }

  public pxcStatus QueryHandData(PXCHandData.AccessOrderType accessOrder, int index, SWIGTYPE_p_p_PXCHandData__IHand handData) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCHandData_QueryHandData__SWIG_0(swigCPtr, this, accessOrder.swigValue(), index, SWIGTYPE_p_p_PXCHandData__IHand.getCPtr(handData)));
  }

  public pxcStatus QueryHandDataById(int handID, SWIGTYPE_p_p_PXCHandData__IHand handData) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCHandData_QueryHandDataById(swigCPtr, this, handID, SWIGTYPE_p_p_PXCHandData__IHand.getCPtr(handData)));
  }

  public PXCHandData.IHand QueryHandData(PXCHandData.AccessOrderType accessOrder, int index) {
    long cPtr = realsenseJNI.PXCHandData_QueryHandData__SWIG_1(swigCPtr, this, accessOrder.swigValue(), index);
    return (cPtr == 0) ? null : new PXCHandData.IHand(cPtr, false);
  }

  public final static int NUMBER_OF_FINGERS = realsenseJNI.PXCHandData_NUMBER_OF_FINGERS_get();

  public final static int NUMBER_OF_EXTREMITIES = realsenseJNI.PXCHandData_NUMBER_OF_EXTREMITIES_get();

  public final static int NUMBER_OF_JOINTS = realsenseJNI.PXCHandData_NUMBER_OF_JOINTS_get();

  public final static int RESERVED_NUMBER_OF_JOINTS = realsenseJNI.PXCHandData_RESERVED_NUMBER_OF_JOINTS_get();

  public final static int MAX_NAME_SIZE = realsenseJNI.PXCHandData_MAX_NAME_SIZE_get();

  public final static int MAX_PATH_NAME = realsenseJNI.PXCHandData_MAX_PATH_NAME_get();

  public final static class JointType {
    public final static PXCHandData.JointType JOINT_WRIST = new PXCHandData.JointType("JOINT_WRIST", realsenseJNI.PXCHandData_JOINT_WRIST_get());
    public final static PXCHandData.JointType JOINT_CENTER = new PXCHandData.JointType("JOINT_CENTER");
    public final static PXCHandData.JointType JOINT_THUMB_BASE = new PXCHandData.JointType("JOINT_THUMB_BASE");
    public final static PXCHandData.JointType JOINT_THUMB_JT1 = new PXCHandData.JointType("JOINT_THUMB_JT1");
    public final static PXCHandData.JointType JOINT_THUMB_JT2 = new PXCHandData.JointType("JOINT_THUMB_JT2");
    public final static PXCHandData.JointType JOINT_THUMB_TIP = new PXCHandData.JointType("JOINT_THUMB_TIP");
    public final static PXCHandData.JointType JOINT_INDEX_BASE = new PXCHandData.JointType("JOINT_INDEX_BASE");
    public final static PXCHandData.JointType JOINT_INDEX_JT1 = new PXCHandData.JointType("JOINT_INDEX_JT1");
    public final static PXCHandData.JointType JOINT_INDEX_JT2 = new PXCHandData.JointType("JOINT_INDEX_JT2");
    public final static PXCHandData.JointType JOINT_INDEX_TIP = new PXCHandData.JointType("JOINT_INDEX_TIP");
    public final static PXCHandData.JointType JOINT_MIDDLE_BASE = new PXCHandData.JointType("JOINT_MIDDLE_BASE");
    public final static PXCHandData.JointType JOINT_MIDDLE_JT1 = new PXCHandData.JointType("JOINT_MIDDLE_JT1");
    public final static PXCHandData.JointType JOINT_MIDDLE_JT2 = new PXCHandData.JointType("JOINT_MIDDLE_JT2");
    public final static PXCHandData.JointType JOINT_MIDDLE_TIP = new PXCHandData.JointType("JOINT_MIDDLE_TIP");
    public final static PXCHandData.JointType JOINT_RING_BASE = new PXCHandData.JointType("JOINT_RING_BASE");
    public final static PXCHandData.JointType JOINT_RING_JT1 = new PXCHandData.JointType("JOINT_RING_JT1");
    public final static PXCHandData.JointType JOINT_RING_JT2 = new PXCHandData.JointType("JOINT_RING_JT2");
    public final static PXCHandData.JointType JOINT_RING_TIP = new PXCHandData.JointType("JOINT_RING_TIP");
    public final static PXCHandData.JointType JOINT_PINKY_BASE = new PXCHandData.JointType("JOINT_PINKY_BASE");
    public final static PXCHandData.JointType JOINT_PINKY_JT1 = new PXCHandData.JointType("JOINT_PINKY_JT1");
    public final static PXCHandData.JointType JOINT_PINKY_JT2 = new PXCHandData.JointType("JOINT_PINKY_JT2");
    public final static PXCHandData.JointType JOINT_PINKY_TIP = new PXCHandData.JointType("JOINT_PINKY_TIP");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static JointType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + JointType.class + " with value " + swigValue);
    }

    private JointType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private JointType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private JointType(String swigName, JointType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static JointType[] swigValues = { JOINT_WRIST, JOINT_CENTER, JOINT_THUMB_BASE, JOINT_THUMB_JT1, JOINT_THUMB_JT2, JOINT_THUMB_TIP, JOINT_INDEX_BASE, JOINT_INDEX_JT1, JOINT_INDEX_JT2, JOINT_INDEX_TIP, JOINT_MIDDLE_BASE, JOINT_MIDDLE_JT1, JOINT_MIDDLE_JT2, JOINT_MIDDLE_TIP, JOINT_RING_BASE, JOINT_RING_JT1, JOINT_RING_JT2, JOINT_RING_TIP, JOINT_PINKY_BASE, JOINT_PINKY_JT1, JOINT_PINKY_JT2, JOINT_PINKY_TIP };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class ExtremityType {
    public final static PXCHandData.ExtremityType EXTREMITY_CLOSEST = new PXCHandData.ExtremityType("EXTREMITY_CLOSEST", realsenseJNI.PXCHandData_EXTREMITY_CLOSEST_get());
    public final static PXCHandData.ExtremityType EXTREMITY_LEFTMOST = new PXCHandData.ExtremityType("EXTREMITY_LEFTMOST");
    public final static PXCHandData.ExtremityType EXTREMITY_RIGHTMOST = new PXCHandData.ExtremityType("EXTREMITY_RIGHTMOST");
    public final static PXCHandData.ExtremityType EXTREMITY_TOPMOST = new PXCHandData.ExtremityType("EXTREMITY_TOPMOST");
    public final static PXCHandData.ExtremityType EXTREMITY_BOTTOMMOST = new PXCHandData.ExtremityType("EXTREMITY_BOTTOMMOST");
    public final static PXCHandData.ExtremityType EXTREMITY_CENTER = new PXCHandData.ExtremityType("EXTREMITY_CENTER");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ExtremityType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ExtremityType.class + " with value " + swigValue);
    }

    private ExtremityType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ExtremityType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ExtremityType(String swigName, ExtremityType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ExtremityType[] swigValues = { EXTREMITY_CLOSEST, EXTREMITY_LEFTMOST, EXTREMITY_RIGHTMOST, EXTREMITY_TOPMOST, EXTREMITY_BOTTOMMOST, EXTREMITY_CENTER };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class FingerType {
    public final static PXCHandData.FingerType FINGER_THUMB = new PXCHandData.FingerType("FINGER_THUMB", realsenseJNI.PXCHandData_FINGER_THUMB_get());
    public final static PXCHandData.FingerType FINGER_INDEX = new PXCHandData.FingerType("FINGER_INDEX");
    public final static PXCHandData.FingerType FINGER_MIDDLE = new PXCHandData.FingerType("FINGER_MIDDLE");
    public final static PXCHandData.FingerType FINGER_RING = new PXCHandData.FingerType("FINGER_RING");
    public final static PXCHandData.FingerType FINGER_PINKY = new PXCHandData.FingerType("FINGER_PINKY");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static FingerType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + FingerType.class + " with value " + swigValue);
    }

    private FingerType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private FingerType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private FingerType(String swigName, FingerType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static FingerType[] swigValues = { FINGER_THUMB, FINGER_INDEX, FINGER_MIDDLE, FINGER_RING, FINGER_PINKY };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class BodySideType {
    public final static PXCHandData.BodySideType BODY_SIDE_UNKNOWN = new PXCHandData.BodySideType("BODY_SIDE_UNKNOWN", realsenseJNI.PXCHandData_BODY_SIDE_UNKNOWN_get());
    public final static PXCHandData.BodySideType BODY_SIDE_LEFT = new PXCHandData.BodySideType("BODY_SIDE_LEFT");
    public final static PXCHandData.BodySideType BODY_SIDE_RIGHT = new PXCHandData.BodySideType("BODY_SIDE_RIGHT");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static BodySideType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + BodySideType.class + " with value " + swigValue);
    }

    private BodySideType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private BodySideType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private BodySideType(String swigName, BodySideType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static BodySideType[] swigValues = { BODY_SIDE_UNKNOWN, BODY_SIDE_LEFT, BODY_SIDE_RIGHT };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class AlertType {
    public final static PXCHandData.AlertType ALERT_HAND_DETECTED = new PXCHandData.AlertType("ALERT_HAND_DETECTED", realsenseJNI.PXCHandData_ALERT_HAND_DETECTED_get());
    public final static PXCHandData.AlertType ALERT_HAND_NOT_DETECTED = new PXCHandData.AlertType("ALERT_HAND_NOT_DETECTED", realsenseJNI.PXCHandData_ALERT_HAND_NOT_DETECTED_get());
    public final static PXCHandData.AlertType ALERT_HAND_TRACKED = new PXCHandData.AlertType("ALERT_HAND_TRACKED", realsenseJNI.PXCHandData_ALERT_HAND_TRACKED_get());
    public final static PXCHandData.AlertType ALERT_HAND_NOT_TRACKED = new PXCHandData.AlertType("ALERT_HAND_NOT_TRACKED", realsenseJNI.PXCHandData_ALERT_HAND_NOT_TRACKED_get());
    public final static PXCHandData.AlertType ALERT_HAND_CALIBRATED = new PXCHandData.AlertType("ALERT_HAND_CALIBRATED", realsenseJNI.PXCHandData_ALERT_HAND_CALIBRATED_get());
    public final static PXCHandData.AlertType ALERT_HAND_NOT_CALIBRATED = new PXCHandData.AlertType("ALERT_HAND_NOT_CALIBRATED", realsenseJNI.PXCHandData_ALERT_HAND_NOT_CALIBRATED_get());
    public final static PXCHandData.AlertType ALERT_HAND_OUT_OF_BORDERS = new PXCHandData.AlertType("ALERT_HAND_OUT_OF_BORDERS", realsenseJNI.PXCHandData_ALERT_HAND_OUT_OF_BORDERS_get());
    public final static PXCHandData.AlertType ALERT_HAND_INSIDE_BORDERS = new PXCHandData.AlertType("ALERT_HAND_INSIDE_BORDERS", realsenseJNI.PXCHandData_ALERT_HAND_INSIDE_BORDERS_get());
    public final static PXCHandData.AlertType ALERT_HAND_OUT_OF_LEFT_BORDER = new PXCHandData.AlertType("ALERT_HAND_OUT_OF_LEFT_BORDER", realsenseJNI.PXCHandData_ALERT_HAND_OUT_OF_LEFT_BORDER_get());
    public final static PXCHandData.AlertType ALERT_HAND_OUT_OF_RIGHT_BORDER = new PXCHandData.AlertType("ALERT_HAND_OUT_OF_RIGHT_BORDER", realsenseJNI.PXCHandData_ALERT_HAND_OUT_OF_RIGHT_BORDER_get());
    public final static PXCHandData.AlertType ALERT_HAND_OUT_OF_TOP_BORDER = new PXCHandData.AlertType("ALERT_HAND_OUT_OF_TOP_BORDER", realsenseJNI.PXCHandData_ALERT_HAND_OUT_OF_TOP_BORDER_get());
    public final static PXCHandData.AlertType ALERT_HAND_OUT_OF_BOTTOM_BORDER = new PXCHandData.AlertType("ALERT_HAND_OUT_OF_BOTTOM_BORDER", realsenseJNI.PXCHandData_ALERT_HAND_OUT_OF_BOTTOM_BORDER_get());
    public final static PXCHandData.AlertType ALERT_HAND_TOO_FAR = new PXCHandData.AlertType("ALERT_HAND_TOO_FAR", realsenseJNI.PXCHandData_ALERT_HAND_TOO_FAR_get());
    public final static PXCHandData.AlertType ALERT_HAND_TOO_CLOSE = new PXCHandData.AlertType("ALERT_HAND_TOO_CLOSE", realsenseJNI.PXCHandData_ALERT_HAND_TOO_CLOSE_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static AlertType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + AlertType.class + " with value " + swigValue);
    }

    private AlertType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private AlertType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private AlertType(String swigName, AlertType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static AlertType[] swigValues = { ALERT_HAND_DETECTED, ALERT_HAND_NOT_DETECTED, ALERT_HAND_TRACKED, ALERT_HAND_NOT_TRACKED, ALERT_HAND_CALIBRATED, ALERT_HAND_NOT_CALIBRATED, ALERT_HAND_OUT_OF_BORDERS, ALERT_HAND_INSIDE_BORDERS, ALERT_HAND_OUT_OF_LEFT_BORDER, ALERT_HAND_OUT_OF_RIGHT_BORDER, ALERT_HAND_OUT_OF_TOP_BORDER, ALERT_HAND_OUT_OF_BOTTOM_BORDER, ALERT_HAND_TOO_FAR, ALERT_HAND_TOO_CLOSE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class GestureStateType {
    public final static PXCHandData.GestureStateType GESTURE_STATE_START = new PXCHandData.GestureStateType("GESTURE_STATE_START", realsenseJNI.PXCHandData_GESTURE_STATE_START_get());
    public final static PXCHandData.GestureStateType GESTURE_STATE_IN_PROGRESS = new PXCHandData.GestureStateType("GESTURE_STATE_IN_PROGRESS");
    public final static PXCHandData.GestureStateType GESTURE_STATE_END = new PXCHandData.GestureStateType("GESTURE_STATE_END");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static GestureStateType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + GestureStateType.class + " with value " + swigValue);
    }

    private GestureStateType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private GestureStateType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private GestureStateType(String swigName, GestureStateType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static GestureStateType[] swigValues = { GESTURE_STATE_START, GESTURE_STATE_IN_PROGRESS, GESTURE_STATE_END };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class TrackingModeType {
    public final static PXCHandData.TrackingModeType TRACKING_MODE_FULL_HAND = new PXCHandData.TrackingModeType("TRACKING_MODE_FULL_HAND", realsenseJNI.PXCHandData_TRACKING_MODE_FULL_HAND_get());
    public final static PXCHandData.TrackingModeType TRACKING_MODE_EXTREMITIES = new PXCHandData.TrackingModeType("TRACKING_MODE_EXTREMITIES");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static TrackingModeType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + TrackingModeType.class + " with value " + swigValue);
    }

    private TrackingModeType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private TrackingModeType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private TrackingModeType(String swigName, TrackingModeType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static TrackingModeType[] swigValues = { TRACKING_MODE_FULL_HAND, TRACKING_MODE_EXTREMITIES };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class DistanceUnitType {
    public final static PXCHandData.DistanceUnitType DISTANCE_UNIT_METERS = new PXCHandData.DistanceUnitType("DISTANCE_UNIT_METERS", realsenseJNI.PXCHandData_DISTANCE_UNIT_METERS_get());
    public final static PXCHandData.DistanceUnitType DISTANCE_UNIT_CENTIMETERS = new PXCHandData.DistanceUnitType("DISTANCE_UNIT_CENTIMETERS");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static DistanceUnitType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + DistanceUnitType.class + " with value " + swigValue);
    }

    private DistanceUnitType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private DistanceUnitType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private DistanceUnitType(String swigName, DistanceUnitType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static DistanceUnitType[] swigValues = { DISTANCE_UNIT_METERS, DISTANCE_UNIT_CENTIMETERS };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class JointSpeedType {
    public final static PXCHandData.JointSpeedType JOINT_SPEED_AVERAGE = new PXCHandData.JointSpeedType("JOINT_SPEED_AVERAGE", realsenseJNI.PXCHandData_JOINT_SPEED_AVERAGE_get());
    public final static PXCHandData.JointSpeedType JOINT_SPEED_ABSOLUTE = new PXCHandData.JointSpeedType("JOINT_SPEED_ABSOLUTE");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static JointSpeedType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + JointSpeedType.class + " with value " + swigValue);
    }

    private JointSpeedType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private JointSpeedType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private JointSpeedType(String swigName, JointSpeedType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static JointSpeedType[] swigValues = { JOINT_SPEED_AVERAGE, JOINT_SPEED_ABSOLUTE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class AccessOrderType {
    public final static PXCHandData.AccessOrderType ACCESS_ORDER_BY_ID = new PXCHandData.AccessOrderType("ACCESS_ORDER_BY_ID", realsenseJNI.PXCHandData_ACCESS_ORDER_BY_ID_get());
    public final static PXCHandData.AccessOrderType ACCESS_ORDER_BY_TIME = new PXCHandData.AccessOrderType("ACCESS_ORDER_BY_TIME");
    public final static PXCHandData.AccessOrderType ACCESS_ORDER_NEAR_TO_FAR = new PXCHandData.AccessOrderType("ACCESS_ORDER_NEAR_TO_FAR");
    public final static PXCHandData.AccessOrderType ACCESS_ORDER_LEFT_HANDS = new PXCHandData.AccessOrderType("ACCESS_ORDER_LEFT_HANDS");
    public final static PXCHandData.AccessOrderType ACCESS_ORDER_RIGHT_HANDS = new PXCHandData.AccessOrderType("ACCESS_ORDER_RIGHT_HANDS");
    public final static PXCHandData.AccessOrderType ACCESS_ORDER_FIXED = new PXCHandData.AccessOrderType("ACCESS_ORDER_FIXED");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static AccessOrderType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + AccessOrderType.class + " with value " + swigValue);
    }

    private AccessOrderType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private AccessOrderType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private AccessOrderType(String swigName, AccessOrderType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static AccessOrderType[] swigValues = { ACCESS_ORDER_BY_ID, ACCESS_ORDER_BY_TIME, ACCESS_ORDER_NEAR_TO_FAR, ACCESS_ORDER_LEFT_HANDS, ACCESS_ORDER_RIGHT_HANDS, ACCESS_ORDER_FIXED };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
