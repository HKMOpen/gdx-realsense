/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.realsense;

public class PXCImage extends PXCBase {
  private long swigCPtr;

  protected PXCImage(long cPtr, boolean cMemoryOwn) {
    super(realsenseJNI.PXCImage_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PXCImage obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static SWIGTYPE_p_wchar_t PixelFormatToString(PXCImage.PixelFormat format) {
    long cPtr = realsenseJNI.PXCImage_PixelFormatToString(format.swigValue());
    return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
  }

  static public class ImageInfo {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected ImageInfo(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(ImageInfo obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          realsenseJNI.delete_PXCImage_ImageInfo(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setWidth(int value) {
      realsenseJNI.PXCImage_ImageInfo_width_set(swigCPtr, this, value);
    }
  
    public int getWidth() {
      return realsenseJNI.PXCImage_ImageInfo_width_get(swigCPtr, this);
    }
  
    public void setHeight(int value) {
      realsenseJNI.PXCImage_ImageInfo_height_set(swigCPtr, this, value);
    }
  
    public int getHeight() {
      return realsenseJNI.PXCImage_ImageInfo_height_get(swigCPtr, this);
    }
  
    public void setFormat(PXCImage.PixelFormat value) {
      realsenseJNI.PXCImage_ImageInfo_format_set(swigCPtr, this, value.swigValue());
    }
  
    public PXCImage.PixelFormat getFormat() {
      return PXCImage.PixelFormat.swigToEnum(realsenseJNI.PXCImage_ImageInfo_format_get(swigCPtr, this));
    }
  
    public void setReserved(int value) {
      realsenseJNI.PXCImage_ImageInfo_reserved_set(swigCPtr, this, value);
    }
  
    public int getReserved() {
      return realsenseJNI.PXCImage_ImageInfo_reserved_get(swigCPtr, this);
    }
  
    public ImageInfo() {
      this(realsenseJNI.new_PXCImage_ImageInfo(), true);
    }
  
  }

  static public class ImageData {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected ImageData(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(ImageData obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          realsenseJNI.delete_PXCImage_ImageData(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setFormat(PXCImage.PixelFormat value) {
      realsenseJNI.PXCImage_ImageData_format_set(swigCPtr, this, value.swigValue());
    }
  
    public PXCImage.PixelFormat getFormat() {
      return PXCImage.PixelFormat.swigToEnum(realsenseJNI.PXCImage_ImageData_format_get(swigCPtr, this));
    }
  
    public void setReserved(SWIGTYPE_p_int value) {
      realsenseJNI.PXCImage_ImageData_reserved_set(swigCPtr, this, SWIGTYPE_p_int.getCPtr(value));
    }
  
    public SWIGTYPE_p_int getReserved() {
      long cPtr = realsenseJNI.PXCImage_ImageData_reserved_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
    }
  
    public void setPitches(SWIGTYPE_p_int value) {
      realsenseJNI.PXCImage_ImageData_pitches_set(swigCPtr, this, SWIGTYPE_p_int.getCPtr(value));
    }
  
    public SWIGTYPE_p_int getPitches() {
      long cPtr = realsenseJNI.PXCImage_ImageData_pitches_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
    }
  
    public void setPlanes(SWIGTYPE_p_p_unsigned_char value) {
      realsenseJNI.PXCImage_ImageData_planes_set(swigCPtr, this, SWIGTYPE_p_p_unsigned_char.getCPtr(value));
    }
  
    public SWIGTYPE_p_p_unsigned_char getPlanes() {
      long cPtr = realsenseJNI.PXCImage_ImageData_planes_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_p_unsigned_char(cPtr, false);
    }
  
    public int getPlanePitch(int planeIdx) {
      return realsenseJNI.PXCImage_ImageData_getPlanePitch(swigCPtr, this, planeIdx);
    }
  
    public void getPlaneData(int planeIdx, java.nio.ByteBuffer planeDataOutput, int length) {
    assert planeDataOutput.isDirect() : "Buffer must be allocated direct.";
      {
        realsenseJNI.PXCImage_ImageData_getPlaneData(swigCPtr, this, planeIdx, planeDataOutput, length);
      }
    }
  
    public ImageData() {
      this(realsenseJNI.new_PXCImage_ImageData(), true);
    }
  
  }

  public PXCImage.ImageInfo QueryInfo() {
    return new PXCImage.ImageInfo(realsenseJNI.PXCImage_QueryInfo(swigCPtr, this), true);
  }

  public SWIGTYPE_p___int64 QueryTimeStamp() {
    return new SWIGTYPE_p___int64(realsenseJNI.PXCImage_QueryTimeStamp(swigCPtr, this), true);
  }

  public int QueryStreamType() {
    return realsenseJNI.PXCImage_QueryStreamType(swigCPtr, this);
  }

  public PXCImage.Option QueryOptions() {
    return PXCImage.Option.swigToEnum(realsenseJNI.PXCImage_QueryOptions(swigCPtr, this));
  }

  public void SetTimeStamp(SWIGTYPE_p___int64 ts) {
    realsenseJNI.PXCImage_SetTimeStamp(swigCPtr, this, SWIGTYPE_p___int64.getCPtr(ts));
  }

  public void SetStreamType(int streamType) {
    realsenseJNI.PXCImage_SetStreamType(swigCPtr, this, streamType);
  }

  public void SetOptions(PXCImage.Option options) {
    realsenseJNI.PXCImage_SetOptions(swigCPtr, this, options.swigValue());
  }

  public pxcStatus CopyImage(PXCImage src_image) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCImage_CopyImage(swigCPtr, this, PXCImage.getCPtr(src_image), src_image));
  }

  public pxcStatus ExportData(PXCImage.ImageData data, int flags) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCImage_ExportData__SWIG_0(swigCPtr, this, PXCImage.ImageData.getCPtr(data), data, flags));
  }

  public pxcStatus ExportData(PXCImage.ImageData data) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCImage_ExportData__SWIG_1(swigCPtr, this, PXCImage.ImageData.getCPtr(data), data));
  }

  public pxcStatus ImportData(PXCImage.ImageData data, int flags) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCImage_ImportData__SWIG_0(swigCPtr, this, PXCImage.ImageData.getCPtr(data), data, flags));
  }

  public pxcStatus ImportData(PXCImage.ImageData data) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCImage_ImportData__SWIG_1(swigCPtr, this, PXCImage.ImageData.getCPtr(data), data));
  }

  public pxcStatus AcquireAccess(PXCImage.Access access, PXCImage.PixelFormat format, PXCImage.Option options, PXCImage.ImageData data) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCImage_AcquireAccess__SWIG_0(swigCPtr, this, access.swigValue(), format.swigValue(), options.swigValue(), PXCImage.ImageData.getCPtr(data), data));
  }

  public pxcStatus AcquireAccess(PXCImage.Access access, PXCImage.PixelFormat format, PXCImage.ImageData data) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCImage_AcquireAccess__SWIG_1(swigCPtr, this, access.swigValue(), format.swigValue(), PXCImage.ImageData.getCPtr(data), data));
  }

  public pxcStatus AcquireAccess(PXCImage.Access access, PXCImage.ImageData data) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCImage_AcquireAccess__SWIG_2(swigCPtr, this, access.swigValue(), PXCImage.ImageData.getCPtr(data), data));
  }

  public pxcStatus ReleaseAccess(PXCImage.ImageData data) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCImage_ReleaseAccess(swigCPtr, this, PXCImage.ImageData.getCPtr(data), data));
  }

  public void AddRef() {
    realsenseJNI.PXCImage_AddRef(swigCPtr, this);
  }

  public final static int NUM_OF_PLANES = realsenseJNI.PXCImage_NUM_OF_PLANES_get();

  public final static int METADATA_DEVICE_PROPERTIES = realsenseJNI.PXCImage_METADATA_DEVICE_PROPERTIES_get();

  public final static int METADATA_DEVICE_PROJECTION = realsenseJNI.PXCImage_METADATA_DEVICE_PROJECTION_get();

  public final static class PixelFormat {
    public final static PXCImage.PixelFormat PIXEL_FORMAT_ANY = new PXCImage.PixelFormat("PIXEL_FORMAT_ANY", realsenseJNI.PXCImage_PIXEL_FORMAT_ANY_get());
    public final static PXCImage.PixelFormat PIXEL_FORMAT_YUY2 = new PXCImage.PixelFormat("PIXEL_FORMAT_YUY2", realsenseJNI.PXCImage_PIXEL_FORMAT_YUY2_get());
    public final static PXCImage.PixelFormat PIXEL_FORMAT_NV12 = new PXCImage.PixelFormat("PIXEL_FORMAT_NV12");
    public final static PXCImage.PixelFormat PIXEL_FORMAT_RGB32 = new PXCImage.PixelFormat("PIXEL_FORMAT_RGB32");
    public final static PXCImage.PixelFormat PIXEL_FORMAT_RGB24 = new PXCImage.PixelFormat("PIXEL_FORMAT_RGB24");
    public final static PXCImage.PixelFormat PIXEL_FORMAT_Y8 = new PXCImage.PixelFormat("PIXEL_FORMAT_Y8");
    public final static PXCImage.PixelFormat PIXEL_FORMAT_DEPTH = new PXCImage.PixelFormat("PIXEL_FORMAT_DEPTH", realsenseJNI.PXCImage_PIXEL_FORMAT_DEPTH_get());
    public final static PXCImage.PixelFormat PIXEL_FORMAT_DEPTH_RAW = new PXCImage.PixelFormat("PIXEL_FORMAT_DEPTH_RAW");
    public final static PXCImage.PixelFormat PIXEL_FORMAT_DEPTH_F32 = new PXCImage.PixelFormat("PIXEL_FORMAT_DEPTH_F32");
    public final static PXCImage.PixelFormat PIXEL_FORMAT_Y16 = new PXCImage.PixelFormat("PIXEL_FORMAT_Y16", realsenseJNI.PXCImage_PIXEL_FORMAT_Y16_get());
    public final static PXCImage.PixelFormat PIXEL_FORMAT_Y8_IR_RELATIVE = new PXCImage.PixelFormat("PIXEL_FORMAT_Y8_IR_RELATIVE", realsenseJNI.PXCImage_PIXEL_FORMAT_Y8_IR_RELATIVE_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static PixelFormat swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + PixelFormat.class + " with value " + swigValue);
    }

    private PixelFormat(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private PixelFormat(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private PixelFormat(String swigName, PixelFormat swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static PixelFormat[] swigValues = { PIXEL_FORMAT_ANY, PIXEL_FORMAT_YUY2, PIXEL_FORMAT_NV12, PIXEL_FORMAT_RGB32, PIXEL_FORMAT_RGB24, PIXEL_FORMAT_Y8, PIXEL_FORMAT_DEPTH, PIXEL_FORMAT_DEPTH_RAW, PIXEL_FORMAT_DEPTH_F32, PIXEL_FORMAT_Y16, PIXEL_FORMAT_Y8_IR_RELATIVE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Access {
    public final static PXCImage.Access ACCESS_READ = new PXCImage.Access("ACCESS_READ", realsenseJNI.PXCImage_ACCESS_READ_get());
    public final static PXCImage.Access ACCESS_WRITE = new PXCImage.Access("ACCESS_WRITE", realsenseJNI.PXCImage_ACCESS_WRITE_get());
    public final static PXCImage.Access ACCESS_READ_WRITE = new PXCImage.Access("ACCESS_READ_WRITE", realsenseJNI.PXCImage_ACCESS_READ_WRITE_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Access swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Access.class + " with value " + swigValue);
    }

    private Access(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Access(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Access(String swigName, Access swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Access[] swigValues = { ACCESS_READ, ACCESS_WRITE, ACCESS_READ_WRITE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Option {
    public final static PXCImage.Option OPTION_ANY = new PXCImage.Option("OPTION_ANY", realsenseJNI.PXCImage_OPTION_ANY_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Option swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Option.class + " with value " + swigValue);
    }

    private Option(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Option(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Option(String swigName, Option swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Option[] swigValues = { OPTION_ANY };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
