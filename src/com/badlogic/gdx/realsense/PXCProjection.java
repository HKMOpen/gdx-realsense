/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.realsense;

public class PXCProjection extends PXCBase {
  private long swigCPtr;

  protected PXCProjection(long cPtr, boolean cMemoryOwn) {
    super(realsenseJNI.PXCProjection_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PXCProjection obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public pxcStatus MapDepthToColor(int npoints, PXCPoint3DF32 pos_uvz, PXCPointF32 pos_ij) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCProjection_MapDepthToColor(swigCPtr, this, npoints, PXCPoint3DF32.getCPtr(pos_uvz), pos_uvz, PXCPointF32.getCPtr(pos_ij), pos_ij));
  }

  public pxcStatus MapColorToDepth(PXCImage depth, int npoints, PXCPointF32 pos_ij, PXCPointF32 pos_uv) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCProjection_MapColorToDepth(swigCPtr, this, PXCImage.getCPtr(depth), depth, npoints, PXCPointF32.getCPtr(pos_ij), pos_ij, PXCPointF32.getCPtr(pos_uv), pos_uv));
  }

  public pxcStatus ProjectDepthToCamera(int npoints, PXCPoint3DF32 pos_uvz, PXCPoint3DF32 pos3d) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCProjection_ProjectDepthToCamera(swigCPtr, this, npoints, PXCPoint3DF32.getCPtr(pos_uvz), pos_uvz, PXCPoint3DF32.getCPtr(pos3d), pos3d));
  }

  public pxcStatus ProjectColorToCamera(int npoints, PXCPoint3DF32 pos_ijz, PXCPoint3DF32 pos3d) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCProjection_ProjectColorToCamera(swigCPtr, this, npoints, PXCPoint3DF32.getCPtr(pos_ijz), pos_ijz, PXCPoint3DF32.getCPtr(pos3d), pos3d));
  }

  public pxcStatus ProjectCameraToDepth(int npoints, PXCPoint3DF32 pos3d, PXCPointF32 pos_uv) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCProjection_ProjectCameraToDepth(swigCPtr, this, npoints, PXCPoint3DF32.getCPtr(pos3d), pos3d, PXCPointF32.getCPtr(pos_uv), pos_uv));
  }

  public pxcStatus ProjectCameraToColor(int npoints, PXCPoint3DF32 pos3d, PXCPointF32 pos_ij) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCProjection_ProjectCameraToColor(swigCPtr, this, npoints, PXCPoint3DF32.getCPtr(pos3d), pos3d, PXCPointF32.getCPtr(pos_ij), pos_ij));
  }

  public pxcStatus QueryUVMap(PXCImage depth, PXCPointF32 uvmap) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCProjection_QueryUVMap(swigCPtr, this, PXCImage.getCPtr(depth), depth, PXCPointF32.getCPtr(uvmap), uvmap));
  }

  public pxcStatus QueryInvUVMap(PXCImage depth, PXCPointF32 inv_uvmap) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCProjection_QueryInvUVMap(swigCPtr, this, PXCImage.getCPtr(depth), depth, PXCPointF32.getCPtr(inv_uvmap), inv_uvmap));
  }

  public pxcStatus QueryVertices(PXCImage depth, PXCPoint3DF32 vertices) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCProjection_QueryVertices(swigCPtr, this, PXCImage.getCPtr(depth), depth, PXCPoint3DF32.getCPtr(vertices), vertices));
  }

  public PXCImage CreateColorImageMappedToDepth(PXCImage depth, PXCImage color) {
    long cPtr = realsenseJNI.PXCProjection_CreateColorImageMappedToDepth(swigCPtr, this, PXCImage.getCPtr(depth), depth, PXCImage.getCPtr(color), color);
    return (cPtr == 0) ? null : new PXCImage(cPtr, false);
  }

  public PXCImage CreateDepthImageMappedToColor(PXCImage depth, PXCImage color) {
    long cPtr = realsenseJNI.PXCProjection_CreateDepthImageMappedToColor(swigCPtr, this, PXCImage.getCPtr(depth), depth, PXCImage.getCPtr(color), color);
    return (cPtr == 0) ? null : new PXCImage(cPtr, false);
  }

}
