/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.realsense;

public class PXCFaceData extends PXCBase {
  private long swigCPtr;

  protected PXCFaceData(long cPtr, boolean cMemoryOwn) {
    super(realsenseJNI.PXCFaceData_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PXCFaceData obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  static public class LandmarkPointSource {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected LandmarkPointSource(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(LandmarkPointSource obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          realsenseJNI.delete_PXCFaceData_LandmarkPointSource(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setIndex(int value) {
      realsenseJNI.PXCFaceData_LandmarkPointSource_index_set(swigCPtr, this, value);
    }
  
    public int getIndex() {
      return realsenseJNI.PXCFaceData_LandmarkPointSource_index_get(swigCPtr, this);
    }
  
    public void setAlias(PXCFaceData.LandmarkType value) {
      realsenseJNI.PXCFaceData_LandmarkPointSource_alias_set(swigCPtr, this, value.swigValue());
    }
  
    public PXCFaceData.LandmarkType getAlias() {
      return PXCFaceData.LandmarkType.swigToEnum(realsenseJNI.PXCFaceData_LandmarkPointSource_alias_get(swigCPtr, this));
    }
  
    public void setReserved(SWIGTYPE_p_int value) {
      realsenseJNI.PXCFaceData_LandmarkPointSource_reserved_set(swigCPtr, this, SWIGTYPE_p_int.getCPtr(value));
    }
  
    public SWIGTYPE_p_int getReserved() {
      long cPtr = realsenseJNI.PXCFaceData_LandmarkPointSource_reserved_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
    }
  
    public LandmarkPointSource() {
      this(realsenseJNI.new_PXCFaceData_LandmarkPointSource(), true);
    }
  
  }

  static public class LandmarkPoint {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected LandmarkPoint(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(LandmarkPoint obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          realsenseJNI.delete_PXCFaceData_LandmarkPoint(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setSource(PXCFaceData.LandmarkPointSource value) {
      realsenseJNI.PXCFaceData_LandmarkPoint_source_set(swigCPtr, this, PXCFaceData.LandmarkPointSource.getCPtr(value), value);
    }
  
    public PXCFaceData.LandmarkPointSource getSource() {
      long cPtr = realsenseJNI.PXCFaceData_LandmarkPoint_source_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCFaceData.LandmarkPointSource(cPtr, false);
    }
  
    public void setConfidenceImage(int value) {
      realsenseJNI.PXCFaceData_LandmarkPoint_confidenceImage_set(swigCPtr, this, value);
    }
  
    public int getConfidenceImage() {
      return realsenseJNI.PXCFaceData_LandmarkPoint_confidenceImage_get(swigCPtr, this);
    }
  
    public void setConfidenceWorld(int value) {
      realsenseJNI.PXCFaceData_LandmarkPoint_confidenceWorld_set(swigCPtr, this, value);
    }
  
    public int getConfidenceWorld() {
      return realsenseJNI.PXCFaceData_LandmarkPoint_confidenceWorld_get(swigCPtr, this);
    }
  
    public void setWorld(PXCPoint3DF32 value) {
      realsenseJNI.PXCFaceData_LandmarkPoint_world_set(swigCPtr, this, PXCPoint3DF32.getCPtr(value), value);
    }
  
    public PXCPoint3DF32 getWorld() {
      long cPtr = realsenseJNI.PXCFaceData_LandmarkPoint_world_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCPoint3DF32(cPtr, false);
    }
  
    public void setImage(PXCPointF32 value) {
      realsenseJNI.PXCFaceData_LandmarkPoint_image_set(swigCPtr, this, PXCPointF32.getCPtr(value), value);
    }
  
    public PXCPointF32 getImage() {
      long cPtr = realsenseJNI.PXCFaceData_LandmarkPoint_image_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCPointF32(cPtr, false);
    }
  
    public void setReserved(SWIGTYPE_p_int value) {
      realsenseJNI.PXCFaceData_LandmarkPoint_reserved_set(swigCPtr, this, SWIGTYPE_p_int.getCPtr(value));
    }
  
    public SWIGTYPE_p_int getReserved() {
      long cPtr = realsenseJNI.PXCFaceData_LandmarkPoint_reserved_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
    }
  
    public LandmarkPoint() {
      this(realsenseJNI.new_PXCFaceData_LandmarkPoint(), true);
    }
  
  }

  static public class HeadPosition {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected HeadPosition(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(HeadPosition obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          realsenseJNI.delete_PXCFaceData_HeadPosition(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setHeadCenter(PXCPoint3DF32 value) {
      realsenseJNI.PXCFaceData_HeadPosition_headCenter_set(swigCPtr, this, PXCPoint3DF32.getCPtr(value), value);
    }
  
    public PXCPoint3DF32 getHeadCenter() {
      long cPtr = realsenseJNI.PXCFaceData_HeadPosition_headCenter_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCPoint3DF32(cPtr, false);
    }
  
    public void setReserved(SWIGTYPE_p_int value) {
      realsenseJNI.PXCFaceData_HeadPosition_reserved_set(swigCPtr, this, SWIGTYPE_p_int.getCPtr(value));
    }
  
    public SWIGTYPE_p_int getReserved() {
      long cPtr = realsenseJNI.PXCFaceData_HeadPosition_reserved_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
    }
  
    public HeadPosition() {
      this(realsenseJNI.new_PXCFaceData_HeadPosition(), true);
    }
  
  }

  static public class PoseEulerAngles {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected PoseEulerAngles(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(PoseEulerAngles obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          realsenseJNI.delete_PXCFaceData_PoseEulerAngles(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setYaw(float value) {
      realsenseJNI.PXCFaceData_PoseEulerAngles_yaw_set(swigCPtr, this, value);
    }
  
    public float getYaw() {
      return realsenseJNI.PXCFaceData_PoseEulerAngles_yaw_get(swigCPtr, this);
    }
  
    public void setPitch(float value) {
      realsenseJNI.PXCFaceData_PoseEulerAngles_pitch_set(swigCPtr, this, value);
    }
  
    public float getPitch() {
      return realsenseJNI.PXCFaceData_PoseEulerAngles_pitch_get(swigCPtr, this);
    }
  
    public void setRoll(float value) {
      realsenseJNI.PXCFaceData_PoseEulerAngles_roll_set(swigCPtr, this, value);
    }
  
    public float getRoll() {
      return realsenseJNI.PXCFaceData_PoseEulerAngles_roll_get(swigCPtr, this);
    }
  
    public void setReserved(SWIGTYPE_p_int value) {
      realsenseJNI.PXCFaceData_PoseEulerAngles_reserved_set(swigCPtr, this, SWIGTYPE_p_int.getCPtr(value));
    }
  
    public SWIGTYPE_p_int getReserved() {
      long cPtr = realsenseJNI.PXCFaceData_PoseEulerAngles_reserved_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
    }
  
    public PoseEulerAngles() {
      this(realsenseJNI.new_PXCFaceData_PoseEulerAngles(), true);
    }
  
  }

  static public class PoseQuaternion {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected PoseQuaternion(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(PoseQuaternion obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          realsenseJNI.delete_PXCFaceData_PoseQuaternion(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setX(float value) {
      realsenseJNI.PXCFaceData_PoseQuaternion_x_set(swigCPtr, this, value);
    }
  
    public float getX() {
      return realsenseJNI.PXCFaceData_PoseQuaternion_x_get(swigCPtr, this);
    }
  
    public void setY(float value) {
      realsenseJNI.PXCFaceData_PoseQuaternion_y_set(swigCPtr, this, value);
    }
  
    public float getY() {
      return realsenseJNI.PXCFaceData_PoseQuaternion_y_get(swigCPtr, this);
    }
  
    public void setZ(float value) {
      realsenseJNI.PXCFaceData_PoseQuaternion_z_set(swigCPtr, this, value);
    }
  
    public float getZ() {
      return realsenseJNI.PXCFaceData_PoseQuaternion_z_get(swigCPtr, this);
    }
  
    public void setW(float value) {
      realsenseJNI.PXCFaceData_PoseQuaternion_w_set(swigCPtr, this, value);
    }
  
    public float getW() {
      return realsenseJNI.PXCFaceData_PoseQuaternion_w_get(swigCPtr, this);
    }
  
    public void setReserved(SWIGTYPE_p_int value) {
      realsenseJNI.PXCFaceData_PoseQuaternion_reserved_set(swigCPtr, this, SWIGTYPE_p_int.getCPtr(value));
    }
  
    public SWIGTYPE_p_int getReserved() {
      long cPtr = realsenseJNI.PXCFaceData_PoseQuaternion_reserved_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
    }
  
    public PoseQuaternion() {
      this(realsenseJNI.new_PXCFaceData_PoseQuaternion(), true);
    }
  
  }

  static public class DetectionData {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected DetectionData(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(DetectionData obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new UnsupportedOperationException("C++ destructor does not have public access");
        }
        swigCPtr = 0;
      }
    }
  
    public int QueryFaceAverageDepth(SWIGTYPE_p_float outFaceAverageDepth) {
      return realsenseJNI.PXCFaceData_DetectionData_QueryFaceAverageDepth(swigCPtr, this, SWIGTYPE_p_float.getCPtr(outFaceAverageDepth));
    }
  
    public int QueryBoundingRect(PXCRectI32 outBoundingRect) {
      return realsenseJNI.PXCFaceData_DetectionData_QueryBoundingRect(swigCPtr, this, PXCRectI32.getCPtr(outBoundingRect), outBoundingRect);
    }
  
  }

  static public class LandmarksData {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected LandmarksData(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(LandmarksData obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new UnsupportedOperationException("C++ destructor does not have public access");
        }
        swigCPtr = 0;
      }
    }
  
    public int QueryNumPoints() {
      return realsenseJNI.PXCFaceData_LandmarksData_QueryNumPoints(swigCPtr, this);
    }
  
    public int QueryPoints(PXCFaceData.LandmarkPoint outPoints) {
      return realsenseJNI.PXCFaceData_LandmarksData_QueryPoints(swigCPtr, this, PXCFaceData.LandmarkPoint.getCPtr(outPoints), outPoints);
    }
  
    public int QueryPoint(int index, PXCFaceData.LandmarkPoint outPoint) {
      return realsenseJNI.PXCFaceData_LandmarksData_QueryPoint(swigCPtr, this, index, PXCFaceData.LandmarkPoint.getCPtr(outPoint), outPoint);
    }
  
    public int QueryNumPointsByGroup(PXCFaceData.LandmarksGroupType groupFlags) {
      return realsenseJNI.PXCFaceData_LandmarksData_QueryNumPointsByGroup(swigCPtr, this, groupFlags.swigValue());
    }
  
    public int QueryPointsByGroup(PXCFaceData.LandmarksGroupType groupFlags, PXCFaceData.LandmarkPoint outPoints) {
      return realsenseJNI.PXCFaceData_LandmarksData_QueryPointsByGroup(swigCPtr, this, groupFlags.swigValue(), PXCFaceData.LandmarkPoint.getCPtr(outPoints), outPoints);
    }
  
    public int QueryPointIndex(PXCFaceData.LandmarkType name) {
      return realsenseJNI.PXCFaceData_LandmarksData_QueryPointIndex(swigCPtr, this, name.swigValue());
    }
  
  }

  static public class PoseData {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected PoseData(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(PoseData obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new UnsupportedOperationException("C++ destructor does not have public access");
        }
        swigCPtr = 0;
      }
    }
  
    public int QueryPoseAngles(PXCFaceData.PoseEulerAngles outPoseEulerAngles) {
      return realsenseJNI.PXCFaceData_PoseData_QueryPoseAngles(swigCPtr, this, PXCFaceData.PoseEulerAngles.getCPtr(outPoseEulerAngles), outPoseEulerAngles);
    }
  
    public int QueryPoseQuaternion(PXCFaceData.PoseQuaternion outPoseQuaternion) {
      return realsenseJNI.PXCFaceData_PoseData_QueryPoseQuaternion(swigCPtr, this, PXCFaceData.PoseQuaternion.getCPtr(outPoseQuaternion), outPoseQuaternion);
    }
  
    public int QueryHeadPosition(PXCFaceData.HeadPosition outHeadPosition) {
      return realsenseJNI.PXCFaceData_PoseData_QueryHeadPosition(swigCPtr, this, PXCFaceData.HeadPosition.getCPtr(outHeadPosition), outHeadPosition);
    }
  
    public int QueryRotationMatrix(SWIGTYPE_p_double outRotationMatrix) {
      return realsenseJNI.PXCFaceData_PoseData_QueryRotationMatrix(swigCPtr, this, SWIGTYPE_p_double.getCPtr(outRotationMatrix));
    }
  
  }

  static public class ExpressionsData {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected ExpressionsData(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(ExpressionsData obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new UnsupportedOperationException("C++ destructor does not have public access");
        }
        swigCPtr = 0;
      }
    }
  
      static public class FaceExpressionResult {
        private long swigCPtr;
        protected boolean swigCMemOwn;
      
        protected FaceExpressionResult(long cPtr, boolean cMemoryOwn) {
          swigCMemOwn = cMemoryOwn;
          swigCPtr = cPtr;
        }
      
        protected static long getCPtr(FaceExpressionResult obj) {
          return (obj == null) ? 0 : obj.swigCPtr;
        }
      
        protected void finalize() {
          delete();
        }
      
        public synchronized void delete() {
          if (swigCPtr != 0) {
            if (swigCMemOwn) {
              swigCMemOwn = false;
              realsenseJNI.delete_PXCFaceData_ExpressionsData_FaceExpressionResult(swigCPtr);
            }
            swigCPtr = 0;
          }
        }
      
        public void setIntensity(int value) {
          realsenseJNI.PXCFaceData_ExpressionsData_FaceExpressionResult_intensity_set(swigCPtr, this, value);
        }
      
        public int getIntensity() {
          return realsenseJNI.PXCFaceData_ExpressionsData_FaceExpressionResult_intensity_get(swigCPtr, this);
        }
      
        public void setReserved(SWIGTYPE_p_int value) {
          realsenseJNI.PXCFaceData_ExpressionsData_FaceExpressionResult_reserved_set(swigCPtr, this, SWIGTYPE_p_int.getCPtr(value));
        }
      
        public SWIGTYPE_p_int getReserved() {
          long cPtr = realsenseJNI.PXCFaceData_ExpressionsData_FaceExpressionResult_reserved_get(swigCPtr, this);
          return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
        }
      
        public FaceExpressionResult() {
          this(realsenseJNI.new_PXCFaceData_ExpressionsData_FaceExpressionResult(), true);
        }
      
      }
  
    public int QueryExpression(PXCFaceData.ExpressionsData.FaceExpression expression, PXCFaceData.ExpressionsData.FaceExpressionResult expressionResult) {
      return realsenseJNI.PXCFaceData_ExpressionsData_QueryExpression(swigCPtr, this, expression.swigValue(), PXCFaceData.ExpressionsData.FaceExpressionResult.getCPtr(expressionResult), expressionResult);
    }
  
    public final static class FaceExpression {
      public final static PXCFaceData.ExpressionsData.FaceExpression EXPRESSION_BROW_RAISER_LEFT = new PXCFaceData.ExpressionsData.FaceExpression("EXPRESSION_BROW_RAISER_LEFT");
      public final static PXCFaceData.ExpressionsData.FaceExpression EXPRESSION_BROW_RAISER_RIGHT = new PXCFaceData.ExpressionsData.FaceExpression("EXPRESSION_BROW_RAISER_RIGHT");
      public final static PXCFaceData.ExpressionsData.FaceExpression EXPRESSION_BROW_LOWERER_LEFT = new PXCFaceData.ExpressionsData.FaceExpression("EXPRESSION_BROW_LOWERER_LEFT");
      public final static PXCFaceData.ExpressionsData.FaceExpression EXPRESSION_BROW_LOWERER_RIGHT = new PXCFaceData.ExpressionsData.FaceExpression("EXPRESSION_BROW_LOWERER_RIGHT");
      public final static PXCFaceData.ExpressionsData.FaceExpression EXPRESSION_SMILE = new PXCFaceData.ExpressionsData.FaceExpression("EXPRESSION_SMILE");
      public final static PXCFaceData.ExpressionsData.FaceExpression EXPRESSION_KISS = new PXCFaceData.ExpressionsData.FaceExpression("EXPRESSION_KISS");
      public final static PXCFaceData.ExpressionsData.FaceExpression EXPRESSION_MOUTH_OPEN = new PXCFaceData.ExpressionsData.FaceExpression("EXPRESSION_MOUTH_OPEN");
      public final static PXCFaceData.ExpressionsData.FaceExpression EXPRESSION_EYES_CLOSED_LEFT = new PXCFaceData.ExpressionsData.FaceExpression("EXPRESSION_EYES_CLOSED_LEFT");
      public final static PXCFaceData.ExpressionsData.FaceExpression EXPRESSION_EYES_CLOSED_RIGHT = new PXCFaceData.ExpressionsData.FaceExpression("EXPRESSION_EYES_CLOSED_RIGHT");
      public final static PXCFaceData.ExpressionsData.FaceExpression EXPRESSION_HEAD_TURN_LEFT = new PXCFaceData.ExpressionsData.FaceExpression("EXPRESSION_HEAD_TURN_LEFT");
      public final static PXCFaceData.ExpressionsData.FaceExpression EXPRESSION_HEAD_TURN_RIGHT = new PXCFaceData.ExpressionsData.FaceExpression("EXPRESSION_HEAD_TURN_RIGHT");
      public final static PXCFaceData.ExpressionsData.FaceExpression EXPRESSION_HEAD_UP = new PXCFaceData.ExpressionsData.FaceExpression("EXPRESSION_HEAD_UP");
      public final static PXCFaceData.ExpressionsData.FaceExpression EXPRESSION_HEAD_DOWN = new PXCFaceData.ExpressionsData.FaceExpression("EXPRESSION_HEAD_DOWN");
      public final static PXCFaceData.ExpressionsData.FaceExpression EXPRESSION_HEAD_TILT_LEFT = new PXCFaceData.ExpressionsData.FaceExpression("EXPRESSION_HEAD_TILT_LEFT");
      public final static PXCFaceData.ExpressionsData.FaceExpression EXPRESSION_HEAD_TILT_RIGHT = new PXCFaceData.ExpressionsData.FaceExpression("EXPRESSION_HEAD_TILT_RIGHT");
      public final static PXCFaceData.ExpressionsData.FaceExpression EXPRESSION_EYES_TURN_LEFT = new PXCFaceData.ExpressionsData.FaceExpression("EXPRESSION_EYES_TURN_LEFT");
      public final static PXCFaceData.ExpressionsData.FaceExpression EXPRESSION_EYES_TURN_RIGHT = new PXCFaceData.ExpressionsData.FaceExpression("EXPRESSION_EYES_TURN_RIGHT");
      public final static PXCFaceData.ExpressionsData.FaceExpression EXPRESSION_EYES_UP = new PXCFaceData.ExpressionsData.FaceExpression("EXPRESSION_EYES_UP");
      public final static PXCFaceData.ExpressionsData.FaceExpression EXPRESSION_EYES_DOWN = new PXCFaceData.ExpressionsData.FaceExpression("EXPRESSION_EYES_DOWN");
  
      public final int swigValue() {
        return swigValue;
      }
  
      public String toString() {
        return swigName;
      }
  
      public static FaceExpression swigToEnum(int swigValue) {
        if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
          return swigValues[swigValue];
        for (int i = 0; i < swigValues.length; i++)
          if (swigValues[i].swigValue == swigValue)
            return swigValues[i];
        throw new IllegalArgumentException("No enum " + FaceExpression.class + " with value " + swigValue);
      }
  
      private FaceExpression(String swigName) {
        this.swigName = swigName;
        this.swigValue = swigNext++;
      }
  
      private FaceExpression(String swigName, int swigValue) {
        this.swigName = swigName;
        this.swigValue = swigValue;
        swigNext = swigValue+1;
      }
  
      private FaceExpression(String swigName, FaceExpression swigEnum) {
        this.swigName = swigName;
        this.swigValue = swigEnum.swigValue;
        swigNext = this.swigValue+1;
      }
  
      private static FaceExpression[] swigValues = { EXPRESSION_BROW_RAISER_LEFT, EXPRESSION_BROW_RAISER_RIGHT, EXPRESSION_BROW_LOWERER_LEFT, EXPRESSION_BROW_LOWERER_RIGHT, EXPRESSION_SMILE, EXPRESSION_KISS, EXPRESSION_MOUTH_OPEN, EXPRESSION_EYES_CLOSED_LEFT, EXPRESSION_EYES_CLOSED_RIGHT, EXPRESSION_HEAD_TURN_LEFT, EXPRESSION_HEAD_TURN_RIGHT, EXPRESSION_HEAD_UP, EXPRESSION_HEAD_DOWN, EXPRESSION_HEAD_TILT_LEFT, EXPRESSION_HEAD_TILT_RIGHT, EXPRESSION_EYES_TURN_LEFT, EXPRESSION_EYES_TURN_RIGHT, EXPRESSION_EYES_UP, EXPRESSION_EYES_DOWN };
      private static int swigNext = 0;
      private final int swigValue;
      private final String swigName;
    }
  
  }

  static public class RecognitionData {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected RecognitionData(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(RecognitionData obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new UnsupportedOperationException("C++ destructor does not have public access");
        }
        swigCPtr = 0;
      }
    }
  
    public int RegisterUser() {
      return realsenseJNI.PXCFaceData_RecognitionData_RegisterUser(swigCPtr, this);
    }
  
    public void UnregisterUser() {
      realsenseJNI.PXCFaceData_RecognitionData_UnregisterUser(swigCPtr, this);
    }
  
    public int IsRegistered() {
      return realsenseJNI.PXCFaceData_RecognitionData_IsRegistered(swigCPtr, this);
    }
  
    public int QueryUserID() {
      return realsenseJNI.PXCFaceData_RecognitionData_QueryUserID(swigCPtr, this);
    }
  
  }

  static public class RecognitionModuleData {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected RecognitionModuleData(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(RecognitionModuleData obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new UnsupportedOperationException("C++ destructor does not have public access");
        }
        swigCPtr = 0;
      }
    }
  
    public int QueryDatabaseSize() {
      return realsenseJNI.PXCFaceData_RecognitionModuleData_QueryDatabaseSize(swigCPtr, this);
    }
  
    public int QueryDatabaseBuffer(SWIGTYPE_p_unsigned_char buffer) {
      return realsenseJNI.PXCFaceData_RecognitionModuleData_QueryDatabaseBuffer(swigCPtr, this, SWIGTYPE_p_unsigned_char.getCPtr(buffer));
    }
  
  }

  static public class Face {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected Face(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Face obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new UnsupportedOperationException("C++ destructor does not have public access");
        }
        swigCPtr = 0;
      }
    }
  
    public int QueryUserID() {
      return realsenseJNI.PXCFaceData_Face_QueryUserID(swigCPtr, this);
    }
  
    public PXCFaceData.DetectionData QueryDetection() {
      long cPtr = realsenseJNI.PXCFaceData_Face_QueryDetection(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCFaceData.DetectionData(cPtr, false);
    }
  
    public PXCFaceData.LandmarksData QueryLandmarks() {
      long cPtr = realsenseJNI.PXCFaceData_Face_QueryLandmarks(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCFaceData.LandmarksData(cPtr, false);
    }
  
    public PXCFaceData.PoseData QueryPose() {
      long cPtr = realsenseJNI.PXCFaceData_Face_QueryPose(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCFaceData.PoseData(cPtr, false);
    }
  
    public PXCFaceData.ExpressionsData QueryExpressions() {
      long cPtr = realsenseJNI.PXCFaceData_Face_QueryExpressions(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCFaceData.ExpressionsData(cPtr, false);
    }
  
    public PXCFaceData.RecognitionData QueryRecognition() {
      long cPtr = realsenseJNI.PXCFaceData_Face_QueryRecognition(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCFaceData.RecognitionData(cPtr, false);
    }
  
  }

  public pxcStatus Update() {
    return pxcStatus.swigToEnum(realsenseJNI.PXCFaceData_Update(swigCPtr, this));
  }

  public SWIGTYPE_p___int64 QueryFrameTimestamp() {
    return new SWIGTYPE_p___int64(realsenseJNI.PXCFaceData_QueryFrameTimestamp(swigCPtr, this), true);
  }

  public int QueryNumberOfDetectedFaces() {
    return realsenseJNI.PXCFaceData_QueryNumberOfDetectedFaces(swigCPtr, this);
  }

  public PXCFaceData.Face QueryFaceByID(int faceId) {
    long cPtr = realsenseJNI.PXCFaceData_QueryFaceByID(swigCPtr, this, faceId);
    return (cPtr == 0) ? null : new PXCFaceData.Face(cPtr, false);
  }

  public PXCFaceData.Face QueryFaceByIndex(int index) {
    long cPtr = realsenseJNI.PXCFaceData_QueryFaceByIndex(swigCPtr, this, index);
    return (cPtr == 0) ? null : new PXCFaceData.Face(cPtr, false);
  }

  public SWIGTYPE_p_p_PXCFaceData__Face QueryFaces(SWIGTYPE_p_int numDetectedFaces) {
    long cPtr = realsenseJNI.PXCFaceData_QueryFaces(swigCPtr, this, SWIGTYPE_p_int.getCPtr(numDetectedFaces));
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_PXCFaceData__Face(cPtr, false);
  }

  public PXCFaceData.RecognitionModuleData QueryRecognitionModule() {
    long cPtr = realsenseJNI.PXCFaceData_QueryRecognitionModule(swigCPtr, this);
    return (cPtr == 0) ? null : new PXCFaceData.RecognitionModuleData(cPtr, false);
  }

  static public class AlertData {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected AlertData(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(AlertData obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          realsenseJNI.delete_PXCFaceData_AlertData(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setLabel(PXCFaceData.AlertData.AlertType value) {
      realsenseJNI.PXCFaceData_AlertData_label_set(swigCPtr, this, value.swigValue());
    }
  
    public PXCFaceData.AlertData.AlertType getLabel() {
      return PXCFaceData.AlertData.AlertType.swigToEnum(realsenseJNI.PXCFaceData_AlertData_label_get(swigCPtr, this));
    }
  
    public void setTimeStamp(SWIGTYPE_p___int64 value) {
      realsenseJNI.PXCFaceData_AlertData_timeStamp_set(swigCPtr, this, SWIGTYPE_p___int64.getCPtr(value));
    }
  
    public SWIGTYPE_p___int64 getTimeStamp() {
      return new SWIGTYPE_p___int64(realsenseJNI.PXCFaceData_AlertData_timeStamp_get(swigCPtr, this), true);
    }
  
    public void setFaceId(int value) {
      realsenseJNI.PXCFaceData_AlertData_faceId_set(swigCPtr, this, value);
    }
  
    public int getFaceId() {
      return realsenseJNI.PXCFaceData_AlertData_faceId_get(swigCPtr, this);
    }
  
    public void setReserved(SWIGTYPE_p_int value) {
      realsenseJNI.PXCFaceData_AlertData_reserved_set(swigCPtr, this, SWIGTYPE_p_int.getCPtr(value));
    }
  
    public SWIGTYPE_p_int getReserved() {
      long cPtr = realsenseJNI.PXCFaceData_AlertData_reserved_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
    }
  
    public AlertData() {
      this(realsenseJNI.new_PXCFaceData_AlertData(), true);
    }
  
    public final static class AlertType {
      public final static PXCFaceData.AlertData.AlertType UNUSED = new PXCFaceData.AlertData.AlertType("UNUSED");
      public final static PXCFaceData.AlertData.AlertType ALERT_NEW_FACE_DETECTED = new PXCFaceData.AlertData.AlertType("ALERT_NEW_FACE_DETECTED");
      public final static PXCFaceData.AlertData.AlertType ALERT_FACE_OUT_OF_FOV = new PXCFaceData.AlertData.AlertType("ALERT_FACE_OUT_OF_FOV");
      public final static PXCFaceData.AlertData.AlertType ALERT_FACE_BACK_TO_FOV = new PXCFaceData.AlertData.AlertType("ALERT_FACE_BACK_TO_FOV");
      public final static PXCFaceData.AlertData.AlertType ALERT_FACE_OCCLUDED = new PXCFaceData.AlertData.AlertType("ALERT_FACE_OCCLUDED");
      public final static PXCFaceData.AlertData.AlertType ALERT_FACE_NO_LONGER_OCCLUDED = new PXCFaceData.AlertData.AlertType("ALERT_FACE_NO_LONGER_OCCLUDED");
      public final static PXCFaceData.AlertData.AlertType ALERT_FACE_LOST = new PXCFaceData.AlertData.AlertType("ALERT_FACE_LOST");
  
      public final int swigValue() {
        return swigValue;
      }
  
      public String toString() {
        return swigName;
      }
  
      public static AlertType swigToEnum(int swigValue) {
        if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
          return swigValues[swigValue];
        for (int i = 0; i < swigValues.length; i++)
          if (swigValues[i].swigValue == swigValue)
            return swigValues[i];
        throw new IllegalArgumentException("No enum " + AlertType.class + " with value " + swigValue);
      }
  
      private AlertType(String swigName) {
        this.swigName = swigName;
        this.swigValue = swigNext++;
      }
  
      private AlertType(String swigName, int swigValue) {
        this.swigName = swigName;
        this.swigValue = swigValue;
        swigNext = swigValue+1;
      }
  
      private AlertType(String swigName, AlertType swigEnum) {
        this.swigName = swigName;
        this.swigValue = swigEnum.swigValue;
        swigNext = this.swigValue+1;
      }
  
      private static AlertType[] swigValues = { UNUSED, ALERT_NEW_FACE_DETECTED, ALERT_FACE_OUT_OF_FOV, ALERT_FACE_BACK_TO_FOV, ALERT_FACE_OCCLUDED, ALERT_FACE_NO_LONGER_OCCLUDED, ALERT_FACE_LOST };
      private static int swigNext = 0;
      private final int swigValue;
      private final String swigName;
    }
  
  }

  public pxcStatus QueryFiredAlertData(int index, PXCFaceData.AlertData alertData) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCFaceData_QueryFiredAlertData(swigCPtr, this, index, PXCFaceData.AlertData.getCPtr(alertData), alertData));
  }

  public pxcStatus QueryAlertNameByID(PXCFaceData.AlertData.AlertType alertEvent, String outAlertName) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCFaceData_QueryAlertNameByID(swigCPtr, this, alertEvent.swigValue(), outAlertName));
  }

  public int QueryFiredAlertsNumber() {
    return realsenseJNI.PXCFaceData_QueryFiredAlertsNumber(swigCPtr, this);
  }

  public int IsAlertFired(PXCFaceData.AlertData.AlertType alertEvent, PXCFaceData.AlertData alertData) {
    return realsenseJNI.PXCFaceData_IsAlertFired(swigCPtr, this, alertEvent.swigValue(), PXCFaceData.AlertData.getCPtr(alertData), alertData);
  }

  public int IsAlertFiredByFace(PXCFaceData.AlertData.AlertType alertEvent, int faceID, PXCFaceData.AlertData alertData) {
    return realsenseJNI.PXCFaceData_IsAlertFiredByFace(swigCPtr, this, alertEvent.swigValue(), faceID, PXCFaceData.AlertData.getCPtr(alertData), alertData);
  }

  public final static class LandmarkType {
    public final static PXCFaceData.LandmarkType LANDMARK_NOT_NAMED = new PXCFaceData.LandmarkType("LANDMARK_NOT_NAMED", realsenseJNI.PXCFaceData_LANDMARK_NOT_NAMED_get());
    public final static PXCFaceData.LandmarkType LANDMARK_EYE_RIGHT_CENTER = new PXCFaceData.LandmarkType("LANDMARK_EYE_RIGHT_CENTER");
    public final static PXCFaceData.LandmarkType LANDMARK_EYE_LEFT_CENTER = new PXCFaceData.LandmarkType("LANDMARK_EYE_LEFT_CENTER");
    public final static PXCFaceData.LandmarkType LANDMARK_EYELID_RIGHT_TOP = new PXCFaceData.LandmarkType("LANDMARK_EYELID_RIGHT_TOP");
    public final static PXCFaceData.LandmarkType LANDMARK_EYELID_RIGHT_BOTTOM = new PXCFaceData.LandmarkType("LANDMARK_EYELID_RIGHT_BOTTOM");
    public final static PXCFaceData.LandmarkType LANDMARK_EYELID_RIGHT_RIGHT = new PXCFaceData.LandmarkType("LANDMARK_EYELID_RIGHT_RIGHT");
    public final static PXCFaceData.LandmarkType LANDMARK_EYELID_RIGHT_LEFT = new PXCFaceData.LandmarkType("LANDMARK_EYELID_RIGHT_LEFT");
    public final static PXCFaceData.LandmarkType LANDMARK_EYELID_LEFT_TOP = new PXCFaceData.LandmarkType("LANDMARK_EYELID_LEFT_TOP");
    public final static PXCFaceData.LandmarkType LANDMARK_EYELID_LEFT_BOTTOM = new PXCFaceData.LandmarkType("LANDMARK_EYELID_LEFT_BOTTOM");
    public final static PXCFaceData.LandmarkType LANDMARK_EYELID_LEFT_RIGHT = new PXCFaceData.LandmarkType("LANDMARK_EYELID_LEFT_RIGHT");
    public final static PXCFaceData.LandmarkType LANDMARK_EYELID_LEFT_LEFT = new PXCFaceData.LandmarkType("LANDMARK_EYELID_LEFT_LEFT");
    public final static PXCFaceData.LandmarkType LANDMARK_EYEBROW_RIGHT_CENTER = new PXCFaceData.LandmarkType("LANDMARK_EYEBROW_RIGHT_CENTER");
    public final static PXCFaceData.LandmarkType LANDMARK_EYEBROW_RIGHT_RIGHT = new PXCFaceData.LandmarkType("LANDMARK_EYEBROW_RIGHT_RIGHT");
    public final static PXCFaceData.LandmarkType LANDMARK_EYEBROW_RIGHT_LEFT = new PXCFaceData.LandmarkType("LANDMARK_EYEBROW_RIGHT_LEFT");
    public final static PXCFaceData.LandmarkType LANDMARK_EYEBROW_LEFT_CENTER = new PXCFaceData.LandmarkType("LANDMARK_EYEBROW_LEFT_CENTER");
    public final static PXCFaceData.LandmarkType LANDMARK_EYEBROW_LEFT_RIGHT = new PXCFaceData.LandmarkType("LANDMARK_EYEBROW_LEFT_RIGHT");
    public final static PXCFaceData.LandmarkType LANDMARK_EYEBROW_LEFT_LEFT = new PXCFaceData.LandmarkType("LANDMARK_EYEBROW_LEFT_LEFT");
    public final static PXCFaceData.LandmarkType LANDMARK_NOSE_TIP = new PXCFaceData.LandmarkType("LANDMARK_NOSE_TIP");
    public final static PXCFaceData.LandmarkType LANDMARK_NOSE_TOP = new PXCFaceData.LandmarkType("LANDMARK_NOSE_TOP");
    public final static PXCFaceData.LandmarkType LANDMARK_NOSE_BOTTOM = new PXCFaceData.LandmarkType("LANDMARK_NOSE_BOTTOM");
    public final static PXCFaceData.LandmarkType LANDMARK_NOSE_RIGHT = new PXCFaceData.LandmarkType("LANDMARK_NOSE_RIGHT");
    public final static PXCFaceData.LandmarkType LANDMARK_NOSE_LEFT = new PXCFaceData.LandmarkType("LANDMARK_NOSE_LEFT");
    public final static PXCFaceData.LandmarkType LANDMARK_LIP_RIGHT = new PXCFaceData.LandmarkType("LANDMARK_LIP_RIGHT");
    public final static PXCFaceData.LandmarkType LANDMARK_LIP_LEFT = new PXCFaceData.LandmarkType("LANDMARK_LIP_LEFT");
    public final static PXCFaceData.LandmarkType LANDMARK_UPPER_LIP_CENTER = new PXCFaceData.LandmarkType("LANDMARK_UPPER_LIP_CENTER");
    public final static PXCFaceData.LandmarkType LANDMARK_UPPER_LIP_RIGHT = new PXCFaceData.LandmarkType("LANDMARK_UPPER_LIP_RIGHT");
    public final static PXCFaceData.LandmarkType LANDMARK_UPPER_LIP_LEFT = new PXCFaceData.LandmarkType("LANDMARK_UPPER_LIP_LEFT");
    public final static PXCFaceData.LandmarkType LANDMARK_LOWER_LIP_CENTER = new PXCFaceData.LandmarkType("LANDMARK_LOWER_LIP_CENTER");
    public final static PXCFaceData.LandmarkType LANDMARK_LOWER_LIP_RIGHT = new PXCFaceData.LandmarkType("LANDMARK_LOWER_LIP_RIGHT");
    public final static PXCFaceData.LandmarkType LANDMARK_LOWER_LIP_LEFT = new PXCFaceData.LandmarkType("LANDMARK_LOWER_LIP_LEFT");
    public final static PXCFaceData.LandmarkType LANDMARK_FACE_BORDER_TOP_RIGHT = new PXCFaceData.LandmarkType("LANDMARK_FACE_BORDER_TOP_RIGHT");
    public final static PXCFaceData.LandmarkType LANDMARK_FACE_BORDER_TOP_LEFT = new PXCFaceData.LandmarkType("LANDMARK_FACE_BORDER_TOP_LEFT");
    public final static PXCFaceData.LandmarkType LANDMARK_CHIN = new PXCFaceData.LandmarkType("LANDMARK_CHIN");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static LandmarkType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + LandmarkType.class + " with value " + swigValue);
    }

    private LandmarkType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private LandmarkType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private LandmarkType(String swigName, LandmarkType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static LandmarkType[] swigValues = { LANDMARK_NOT_NAMED, LANDMARK_EYE_RIGHT_CENTER, LANDMARK_EYE_LEFT_CENTER, LANDMARK_EYELID_RIGHT_TOP, LANDMARK_EYELID_RIGHT_BOTTOM, LANDMARK_EYELID_RIGHT_RIGHT, LANDMARK_EYELID_RIGHT_LEFT, LANDMARK_EYELID_LEFT_TOP, LANDMARK_EYELID_LEFT_BOTTOM, LANDMARK_EYELID_LEFT_RIGHT, LANDMARK_EYELID_LEFT_LEFT, LANDMARK_EYEBROW_RIGHT_CENTER, LANDMARK_EYEBROW_RIGHT_RIGHT, LANDMARK_EYEBROW_RIGHT_LEFT, LANDMARK_EYEBROW_LEFT_CENTER, LANDMARK_EYEBROW_LEFT_RIGHT, LANDMARK_EYEBROW_LEFT_LEFT, LANDMARK_NOSE_TIP, LANDMARK_NOSE_TOP, LANDMARK_NOSE_BOTTOM, LANDMARK_NOSE_RIGHT, LANDMARK_NOSE_LEFT, LANDMARK_LIP_RIGHT, LANDMARK_LIP_LEFT, LANDMARK_UPPER_LIP_CENTER, LANDMARK_UPPER_LIP_RIGHT, LANDMARK_UPPER_LIP_LEFT, LANDMARK_LOWER_LIP_CENTER, LANDMARK_LOWER_LIP_RIGHT, LANDMARK_LOWER_LIP_LEFT, LANDMARK_FACE_BORDER_TOP_RIGHT, LANDMARK_FACE_BORDER_TOP_LEFT, LANDMARK_CHIN };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class LandmarksGroupType {
    public final static PXCFaceData.LandmarksGroupType LANDMARK_GROUP_LEFT_EYE = new PXCFaceData.LandmarksGroupType("LANDMARK_GROUP_LEFT_EYE", realsenseJNI.PXCFaceData_LANDMARK_GROUP_LEFT_EYE_get());
    public final static PXCFaceData.LandmarksGroupType LANDMARK_GROUP_RIGHT_EYE = new PXCFaceData.LandmarksGroupType("LANDMARK_GROUP_RIGHT_EYE", realsenseJNI.PXCFaceData_LANDMARK_GROUP_RIGHT_EYE_get());
    public final static PXCFaceData.LandmarksGroupType LANDMARK_GROUP_RIGHT_EYEBROW = new PXCFaceData.LandmarksGroupType("LANDMARK_GROUP_RIGHT_EYEBROW", realsenseJNI.PXCFaceData_LANDMARK_GROUP_RIGHT_EYEBROW_get());
    public final static PXCFaceData.LandmarksGroupType LANDMARK_GROUP_LEFT_EYEBROW = new PXCFaceData.LandmarksGroupType("LANDMARK_GROUP_LEFT_EYEBROW", realsenseJNI.PXCFaceData_LANDMARK_GROUP_LEFT_EYEBROW_get());
    public final static PXCFaceData.LandmarksGroupType LANDMARK_GROUP_NOSE = new PXCFaceData.LandmarksGroupType("LANDMARK_GROUP_NOSE", realsenseJNI.PXCFaceData_LANDMARK_GROUP_NOSE_get());
    public final static PXCFaceData.LandmarksGroupType LANDMARK_GROUP_MOUTH = new PXCFaceData.LandmarksGroupType("LANDMARK_GROUP_MOUTH", realsenseJNI.PXCFaceData_LANDMARK_GROUP_MOUTH_get());
    public final static PXCFaceData.LandmarksGroupType LANDMARK_GROUP_JAW = new PXCFaceData.LandmarksGroupType("LANDMARK_GROUP_JAW", realsenseJNI.PXCFaceData_LANDMARK_GROUP_JAW_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static LandmarksGroupType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + LandmarksGroupType.class + " with value " + swigValue);
    }

    private LandmarksGroupType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private LandmarksGroupType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private LandmarksGroupType(String swigName, LandmarksGroupType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static LandmarksGroupType[] swigValues = { LANDMARK_GROUP_LEFT_EYE, LANDMARK_GROUP_RIGHT_EYE, LANDMARK_GROUP_RIGHT_EYEBROW, LANDMARK_GROUP_LEFT_EYEBROW, LANDMARK_GROUP_NOSE, LANDMARK_GROUP_MOUTH, LANDMARK_GROUP_JAW };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static int ALERT_NAME_SIZE = realsenseJNI.PXCFaceData_ALERT_NAME_SIZE_get();

}
