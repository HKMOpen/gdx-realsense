/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.realsense;

public class PXCCaptureManager extends PXCBase {
  private long swigCPtr;

  protected PXCCaptureManager(long cPtr, boolean cMemoryOwn) {
    super(realsenseJNI.PXCCaptureManager_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PXCCaptureManager obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  static public class Handler {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected Handler(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Handler obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          realsenseJNI.delete_PXCCaptureManager_Handler(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public pxcStatus OnCreateDevice(PXCSession.ImplDesc arg0, PXCCapture.Device arg1) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCaptureManager_Handler_OnCreateDevice(swigCPtr, this, PXCSession.ImplDesc.getCPtr(arg0), arg0, PXCCapture.Device.getCPtr(arg1), arg1));
    }
  
    public pxcStatus OnSetupStreams(PXCCapture.Device arg0, PXCCapture.StreamType arg1) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCaptureManager_Handler_OnSetupStreams(swigCPtr, this, PXCCapture.Device.getCPtr(arg0), arg0, arg1.swigValue()));
    }
  
    public pxcStatus OnNextDevice(PXCCapture.Device arg0) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCaptureManager_Handler_OnNextDevice(swigCPtr, this, PXCCapture.Device.getCPtr(arg0), arg0));
    }
  
    public Handler() {
      this(realsenseJNI.new_PXCCaptureManager_Handler(), true);
    }
  
  }

  public void FilterByDeviceInfo(PXCCapture.DeviceInfo dinfo) {
    realsenseJNI.PXCCaptureManager_FilterByDeviceInfo__SWIG_0(swigCPtr, this, PXCCapture.DeviceInfo.getCPtr(dinfo), dinfo);
  }

  public void FilterByDeviceInfo(SWIGTYPE_p_wchar_t name, SWIGTYPE_p_wchar_t did, int didx) {
    realsenseJNI.PXCCaptureManager_FilterByDeviceInfo__SWIG_1(swigCPtr, this, SWIGTYPE_p_wchar_t.getCPtr(name), SWIGTYPE_p_wchar_t.getCPtr(did), didx);
  }

  public void FilterByStreamProfiles(PXCCapture.Device.StreamProfileSet profiles) {
    realsenseJNI.PXCCaptureManager_FilterByStreamProfiles__SWIG_0(swigCPtr, this, PXCCapture.Device.StreamProfileSet.getCPtr(profiles), profiles);
  }

  public void FilterByStreamProfiles(PXCCapture.StreamType type, int width, int height, float fps) {
    realsenseJNI.PXCCaptureManager_FilterByStreamProfiles__SWIG_1(swigCPtr, this, type.swigValue(), width, height, fps);
  }

  public pxcStatus RequestStreams(int mid, PXCVideoModule.DataDesc inputs) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCCaptureManager_RequestStreams(swigCPtr, this, mid, PXCVideoModule.DataDesc.getCPtr(inputs), inputs));
  }

  public pxcStatus LocateStreams(PXCCaptureManager.Handler handler) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCCaptureManager_LocateStreams__SWIG_0(swigCPtr, this, PXCCaptureManager.Handler.getCPtr(handler), handler));
  }

  public pxcStatus LocateStreams() {
    return pxcStatus.swigToEnum(realsenseJNI.PXCCaptureManager_LocateStreams__SWIG_1(swigCPtr, this));
  }

  public void CloseStreams() {
    realsenseJNI.PXCCaptureManager_CloseStreams(swigCPtr, this);
  }

  public PXCCapture QueryCapture() {
    long cPtr = realsenseJNI.PXCCaptureManager_QueryCapture(swigCPtr, this);
    return (cPtr == 0) ? null : new PXCCapture(cPtr, false);
  }

  public PXCCapture.Device QueryDevice() {
    long cPtr = realsenseJNI.PXCCaptureManager_QueryDevice(swigCPtr, this);
    return (cPtr == 0) ? null : new PXCCapture.Device(cPtr, false);
  }

  public PXCSizeI32 QueryImageSize(PXCCapture.StreamType type) {
    return new PXCSizeI32(realsenseJNI.PXCCaptureManager_QueryImageSize(swigCPtr, this, type.swigValue()), true);
  }

  public pxcStatus ReadModuleStreamsAsync(int mid, PXCCapture.Sample sample, SWIGTYPE_p_p_PXCSyncPoint sp) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCCaptureManager_ReadModuleStreamsAsync(swigCPtr, this, mid, PXCCapture.Sample.getCPtr(sample), sample, SWIGTYPE_p_p_PXCSyncPoint.getCPtr(sp)));
  }

  public pxcStatus SetFileName(SWIGTYPE_p_wchar_t file, int record) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCCaptureManager_SetFileName(swigCPtr, this, SWIGTYPE_p_wchar_t.getCPtr(file), record));
  }

  public void SetMask(PXCCapture.StreamType types) {
    realsenseJNI.PXCCaptureManager_SetMask(swigCPtr, this, types.swigValue());
  }

  public void SetPause(int pause) {
    realsenseJNI.PXCCaptureManager_SetPause(swigCPtr, this, pause);
  }

  public void SetRealtime(int realtime) {
    realsenseJNI.PXCCaptureManager_SetRealtime(swigCPtr, this, realtime);
  }

  public void SetFrameByIndex(int frame) {
    realsenseJNI.PXCCaptureManager_SetFrameByIndex(swigCPtr, this, frame);
  }

  public int QueryFrameIndex() {
    return realsenseJNI.PXCCaptureManager_QueryFrameIndex(swigCPtr, this);
  }

  public void SetFrameByTimeStamp(SWIGTYPE_p___int64 ts) {
    realsenseJNI.PXCCaptureManager_SetFrameByTimeStamp(swigCPtr, this, SWIGTYPE_p___int64.getCPtr(ts));
  }

  public SWIGTYPE_p___int64 QueryFrameTimeStamp() {
    return new SWIGTYPE_p___int64(realsenseJNI.PXCCaptureManager_QueryFrameTimeStamp(swigCPtr, this), true);
  }

  public int QueryNumberOfFrames() {
    return realsenseJNI.PXCCaptureManager_QueryNumberOfFrames(swigCPtr, this);
  }

  public final static int CUID = realsenseJNI.PXCCaptureManager_CUID_get();

}
