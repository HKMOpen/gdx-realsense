/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.realsense;

public class PXCCapture extends PXCBase {
  private long swigCPtr;

  protected PXCCapture(long cPtr, boolean cMemoryOwn) {
    super(realsenseJNI.PXCCapture_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PXCCapture obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static String StreamTypeToString(PXCCapture.StreamType type) {
    return realsenseJNI.PXCCapture_StreamTypeToString(type.swigValue());
  }

  public static PXCCapture.StreamType StreamTypeFromIndex(int index) {
    return PXCCapture.StreamType.swigToEnum(realsenseJNI.PXCCapture_StreamTypeFromIndex(index));
  }

  public static int StreamTypeToIndex(PXCCapture.StreamType type) {
    return realsenseJNI.PXCCapture_StreamTypeToIndex(type.swigValue());
  }

  static public class DeviceInfo {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected DeviceInfo(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(DeviceInfo obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          realsenseJNI.delete_PXCCapture_DeviceInfo(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setName(SWIGTYPE_p_wchar_t value) {
      realsenseJNI.PXCCapture_DeviceInfo_name_set(swigCPtr, this, SWIGTYPE_p_wchar_t.getCPtr(value));
    }
  
    public SWIGTYPE_p_wchar_t getName() {
      long cPtr = realsenseJNI.PXCCapture_DeviceInfo_name_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    }
  
    public void setSerial(SWIGTYPE_p_wchar_t value) {
      realsenseJNI.PXCCapture_DeviceInfo_serial_set(swigCPtr, this, SWIGTYPE_p_wchar_t.getCPtr(value));
    }
  
    public SWIGTYPE_p_wchar_t getSerial() {
      long cPtr = realsenseJNI.PXCCapture_DeviceInfo_serial_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    }
  
    public void setDid(SWIGTYPE_p_wchar_t value) {
      realsenseJNI.PXCCapture_DeviceInfo_did_set(swigCPtr, this, SWIGTYPE_p_wchar_t.getCPtr(value));
    }
  
    public SWIGTYPE_p_wchar_t getDid() {
      long cPtr = realsenseJNI.PXCCapture_DeviceInfo_did_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    }
  
    public void setFirmware(SWIGTYPE_p_int value) {
      realsenseJNI.PXCCapture_DeviceInfo_firmware_set(swigCPtr, this, SWIGTYPE_p_int.getCPtr(value));
    }
  
    public SWIGTYPE_p_int getFirmware() {
      long cPtr = realsenseJNI.PXCCapture_DeviceInfo_firmware_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
    }
  
    public void setLocation(PXCPointF32 value) {
      realsenseJNI.PXCCapture_DeviceInfo_location_set(swigCPtr, this, PXCPointF32.getCPtr(value), value);
    }
  
    public PXCPointF32 getLocation() {
      long cPtr = realsenseJNI.PXCCapture_DeviceInfo_location_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCPointF32(cPtr, false);
    }
  
    public void setModel(PXCCapture.DeviceModel value) {
      realsenseJNI.PXCCapture_DeviceInfo_model_set(swigCPtr, this, value.swigValue());
    }
  
    public PXCCapture.DeviceModel getModel() {
      return PXCCapture.DeviceModel.swigToEnum(realsenseJNI.PXCCapture_DeviceInfo_model_get(swigCPtr, this));
    }
  
    public void setOrientation(PXCCapture.DeviceOrientation value) {
      realsenseJNI.PXCCapture_DeviceInfo_orientation_set(swigCPtr, this, value.swigValue());
    }
  
    public PXCCapture.DeviceOrientation getOrientation() {
      return PXCCapture.DeviceOrientation.swigToEnum(realsenseJNI.PXCCapture_DeviceInfo_orientation_get(swigCPtr, this));
    }
  
    public void setStreams(PXCCapture.StreamType value) {
      realsenseJNI.PXCCapture_DeviceInfo_streams_set(swigCPtr, this, value.swigValue());
    }
  
    public PXCCapture.StreamType getStreams() {
      return PXCCapture.StreamType.swigToEnum(realsenseJNI.PXCCapture_DeviceInfo_streams_get(swigCPtr, this));
    }
  
    public void setDidx(int value) {
      realsenseJNI.PXCCapture_DeviceInfo_didx_set(swigCPtr, this, value);
    }
  
    public int getDidx() {
      return realsenseJNI.PXCCapture_DeviceInfo_didx_get(swigCPtr, this);
    }
  
    public void setDuid(int value) {
      realsenseJNI.PXCCapture_DeviceInfo_duid_set(swigCPtr, this, value);
    }
  
    public int getDuid() {
      return realsenseJNI.PXCCapture_DeviceInfo_duid_get(swigCPtr, this);
    }
  
    public void setReserved(SWIGTYPE_p_int value) {
      realsenseJNI.PXCCapture_DeviceInfo_reserved_set(swigCPtr, this, SWIGTYPE_p_int.getCPtr(value));
    }
  
    public SWIGTYPE_p_int getReserved() {
      long cPtr = realsenseJNI.PXCCapture_DeviceInfo_reserved_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
    }
  
    public int QueryStreamNum() {
      return realsenseJNI.PXCCapture_DeviceInfo_QueryStreamNum(swigCPtr, this);
    }
  
    public DeviceInfo() {
      this(realsenseJNI.new_PXCCapture_DeviceInfo(), true);
    }
  
  }

  public int QueryDeviceNum() {
    return realsenseJNI.PXCCapture_QueryDeviceNum(swigCPtr, this);
  }

  public pxcStatus QueryDeviceInfo(int didx, PXCCapture.DeviceInfo dinfo) {
    return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_QueryDeviceInfo(swigCPtr, this, didx, PXCCapture.DeviceInfo.getCPtr(dinfo), dinfo));
  }

  public PXCCapture.Device CreateDevice(int didx) {
    long cPtr = realsenseJNI.PXCCapture_CreateDevice(swigCPtr, this, didx);
    return (cPtr == 0) ? null : new PXCCapture.Device(cPtr, false);
  }

  static public class Sample {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected Sample(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Sample obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          realsenseJNI.delete_PXCCapture_Sample(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setColor(PXCImage value) {
      realsenseJNI.PXCCapture_Sample_color_set(swigCPtr, this, PXCImage.getCPtr(value), value);
    }
  
    public PXCImage getColor() {
      long cPtr = realsenseJNI.PXCCapture_Sample_color_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCImage(cPtr, false);
    }
  
    public void setDepth(PXCImage value) {
      realsenseJNI.PXCCapture_Sample_depth_set(swigCPtr, this, PXCImage.getCPtr(value), value);
    }
  
    public PXCImage getDepth() {
      long cPtr = realsenseJNI.PXCCapture_Sample_depth_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCImage(cPtr, false);
    }
  
    public void setIr(PXCImage value) {
      realsenseJNI.PXCCapture_Sample_ir_set(swigCPtr, this, PXCImage.getCPtr(value), value);
    }
  
    public PXCImage getIr() {
      long cPtr = realsenseJNI.PXCCapture_Sample_ir_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCImage(cPtr, false);
    }
  
    public void setLeft(PXCImage value) {
      realsenseJNI.PXCCapture_Sample_left_set(swigCPtr, this, PXCImage.getCPtr(value), value);
    }
  
    public PXCImage getLeft() {
      long cPtr = realsenseJNI.PXCCapture_Sample_left_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCImage(cPtr, false);
    }
  
    public void setRight(PXCImage value) {
      realsenseJNI.PXCCapture_Sample_right_set(swigCPtr, this, PXCImage.getCPtr(value), value);
    }
  
    public PXCImage getRight() {
      long cPtr = realsenseJNI.PXCCapture_Sample_right_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCImage(cPtr, false);
    }
  
    public void setReserved(SWIGTYPE_p_p_PXCImage value) {
      realsenseJNI.PXCCapture_Sample_reserved_set(swigCPtr, this, SWIGTYPE_p_p_PXCImage.getCPtr(value));
    }
  
    public SWIGTYPE_p_p_PXCImage getReserved() {
      long cPtr = realsenseJNI.PXCCapture_Sample_reserved_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_p_PXCImage(cPtr, false);
    }
  
    public void ReleaseImages() {
      realsenseJNI.PXCCapture_Sample_ReleaseImages(swigCPtr, this);
    }
  
    public Sample() {
      this(realsenseJNI.new_PXCCapture_Sample(), true);
    }
  
  }

  static public class Device extends PXCBase {
    private long swigCPtr;
  
    protected Device(long cPtr, boolean cMemoryOwn) {
      super(realsenseJNI.PXCCapture_Device_SWIGUpcast(cPtr), cMemoryOwn);
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Device obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new UnsupportedOperationException("C++ destructor does not have public access");
        }
        swigCPtr = 0;
      }
      super.delete();
    }
  
    public void QueryDeviceInfo(PXCCapture.DeviceInfo dinfo) {
      realsenseJNI.PXCCapture_Device_QueryDeviceInfo(swigCPtr, this, PXCCapture.DeviceInfo.getCPtr(dinfo), dinfo);
    }
  
    public PXCProjection CreateProjection() {
      long cPtr = realsenseJNI.PXCCapture_Device_CreateProjection(swigCPtr, this);
      return (cPtr == 0) ? null : new PXCProjection(cPtr, false);
    }
  
      static public class StreamProfile {
        private long swigCPtr;
        protected boolean swigCMemOwn;
      
        protected StreamProfile(long cPtr, boolean cMemoryOwn) {
          swigCMemOwn = cMemoryOwn;
          swigCPtr = cPtr;
        }
      
        protected static long getCPtr(StreamProfile obj) {
          return (obj == null) ? 0 : obj.swigCPtr;
        }
      
        protected void finalize() {
          delete();
        }
      
        public synchronized void delete() {
          if (swigCPtr != 0) {
            if (swigCMemOwn) {
              swigCMemOwn = false;
              realsenseJNI.delete_PXCCapture_Device_StreamProfile(swigCPtr);
            }
            swigCPtr = 0;
          }
        }
      
        public void setImageInfo(PXCImage.ImageInfo value) {
          realsenseJNI.PXCCapture_Device_StreamProfile_imageInfo_set(swigCPtr, this, PXCImage.ImageInfo.getCPtr(value), value);
        }
      
        public PXCImage.ImageInfo getImageInfo() {
          long cPtr = realsenseJNI.PXCCapture_Device_StreamProfile_imageInfo_get(swigCPtr, this);
          return (cPtr == 0) ? null : new PXCImage.ImageInfo(cPtr, false);
        }
      
        public void setFrameRate(PXCRangeF32 value) {
          realsenseJNI.PXCCapture_Device_StreamProfile_frameRate_set(swigCPtr, this, PXCRangeF32.getCPtr(value), value);
        }
      
        public PXCRangeF32 getFrameRate() {
          long cPtr = realsenseJNI.PXCCapture_Device_StreamProfile_frameRate_get(swigCPtr, this);
          return (cPtr == 0) ? null : new PXCRangeF32(cPtr, false);
        }
      
        public void setReserved(SWIGTYPE_p_int value) {
          realsenseJNI.PXCCapture_Device_StreamProfile_reserved_set(swigCPtr, this, SWIGTYPE_p_int.getCPtr(value));
        }
      
        public SWIGTYPE_p_int getReserved() {
          long cPtr = realsenseJNI.PXCCapture_Device_StreamProfile_reserved_get(swigCPtr, this);
          return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
        }
      
        public StreamProfile() {
          this(realsenseJNI.new_PXCCapture_Device_StreamProfile(), true);
        }
      
      }
  
      static public class StreamProfileSet {
        private long swigCPtr;
        protected boolean swigCMemOwn;
      
        protected StreamProfileSet(long cPtr, boolean cMemoryOwn) {
          swigCMemOwn = cMemoryOwn;
          swigCPtr = cPtr;
        }
      
        protected static long getCPtr(StreamProfileSet obj) {
          return (obj == null) ? 0 : obj.swigCPtr;
        }
      
        protected void finalize() {
          delete();
        }
      
        public synchronized void delete() {
          if (swigCPtr != 0) {
            if (swigCMemOwn) {
              swigCMemOwn = false;
              realsenseJNI.delete_PXCCapture_Device_StreamProfileSet(swigCPtr);
            }
            swigCPtr = 0;
          }
        }
      
        public void setColor(PXCCapture.Device.StreamProfile value) {
          realsenseJNI.PXCCapture_Device_StreamProfileSet_color_set(swigCPtr, this, PXCCapture.Device.StreamProfile.getCPtr(value), value);
        }
      
        public PXCCapture.Device.StreamProfile getColor() {
          long cPtr = realsenseJNI.PXCCapture_Device_StreamProfileSet_color_get(swigCPtr, this);
          return (cPtr == 0) ? null : new PXCCapture.Device.StreamProfile(cPtr, false);
        }
      
        public void setDepth(PXCCapture.Device.StreamProfile value) {
          realsenseJNI.PXCCapture_Device_StreamProfileSet_depth_set(swigCPtr, this, PXCCapture.Device.StreamProfile.getCPtr(value), value);
        }
      
        public PXCCapture.Device.StreamProfile getDepth() {
          long cPtr = realsenseJNI.PXCCapture_Device_StreamProfileSet_depth_get(swigCPtr, this);
          return (cPtr == 0) ? null : new PXCCapture.Device.StreamProfile(cPtr, false);
        }
      
        public void setIr(PXCCapture.Device.StreamProfile value) {
          realsenseJNI.PXCCapture_Device_StreamProfileSet_ir_set(swigCPtr, this, PXCCapture.Device.StreamProfile.getCPtr(value), value);
        }
      
        public PXCCapture.Device.StreamProfile getIr() {
          long cPtr = realsenseJNI.PXCCapture_Device_StreamProfileSet_ir_get(swigCPtr, this);
          return (cPtr == 0) ? null : new PXCCapture.Device.StreamProfile(cPtr, false);
        }
      
        public void setLeft(PXCCapture.Device.StreamProfile value) {
          realsenseJNI.PXCCapture_Device_StreamProfileSet_left_set(swigCPtr, this, PXCCapture.Device.StreamProfile.getCPtr(value), value);
        }
      
        public PXCCapture.Device.StreamProfile getLeft() {
          long cPtr = realsenseJNI.PXCCapture_Device_StreamProfileSet_left_get(swigCPtr, this);
          return (cPtr == 0) ? null : new PXCCapture.Device.StreamProfile(cPtr, false);
        }
      
        public void setRight(PXCCapture.Device.StreamProfile value) {
          realsenseJNI.PXCCapture_Device_StreamProfileSet_right_set(swigCPtr, this, PXCCapture.Device.StreamProfile.getCPtr(value), value);
        }
      
        public PXCCapture.Device.StreamProfile getRight() {
          long cPtr = realsenseJNI.PXCCapture_Device_StreamProfileSet_right_get(swigCPtr, this);
          return (cPtr == 0) ? null : new PXCCapture.Device.StreamProfile(cPtr, false);
        }
      
        public void setReserved(PXCCapture.Device.StreamProfile value) {
          realsenseJNI.PXCCapture_Device_StreamProfileSet_reserved_set(swigCPtr, this, PXCCapture.Device.StreamProfile.getCPtr(value), value);
        }
      
        public PXCCapture.Device.StreamProfile getReserved() {
          long cPtr = realsenseJNI.PXCCapture_Device_StreamProfileSet_reserved_get(swigCPtr, this);
          return (cPtr == 0) ? null : new PXCCapture.Device.StreamProfile(cPtr, false);
        }
      
        public StreamProfileSet() {
          this(realsenseJNI.new_PXCCapture_Device_StreamProfileSet(), true);
        }
      
      }
  
      static public class PropertyInfo {
        private long swigCPtr;
        protected boolean swigCMemOwn;
      
        protected PropertyInfo(long cPtr, boolean cMemoryOwn) {
          swigCMemOwn = cMemoryOwn;
          swigCPtr = cPtr;
        }
      
        protected static long getCPtr(PropertyInfo obj) {
          return (obj == null) ? 0 : obj.swigCPtr;
        }
      
        protected void finalize() {
          delete();
        }
      
        public synchronized void delete() {
          if (swigCPtr != 0) {
            if (swigCMemOwn) {
              swigCMemOwn = false;
              realsenseJNI.delete_PXCCapture_Device_PropertyInfo(swigCPtr);
            }
            swigCPtr = 0;
          }
        }
      
        public void setRange(PXCRangeF32 value) {
          realsenseJNI.PXCCapture_Device_PropertyInfo_range_set(swigCPtr, this, PXCRangeF32.getCPtr(value), value);
        }
      
        public PXCRangeF32 getRange() {
          long cPtr = realsenseJNI.PXCCapture_Device_PropertyInfo_range_get(swigCPtr, this);
          return (cPtr == 0) ? null : new PXCRangeF32(cPtr, false);
        }
      
        public void setStep(float value) {
          realsenseJNI.PXCCapture_Device_PropertyInfo_step_set(swigCPtr, this, value);
        }
      
        public float getStep() {
          return realsenseJNI.PXCCapture_Device_PropertyInfo_step_get(swigCPtr, this);
        }
      
        public void setDefaultValue(float value) {
          realsenseJNI.PXCCapture_Device_PropertyInfo_defaultValue_set(swigCPtr, this, value);
        }
      
        public float getDefaultValue() {
          return realsenseJNI.PXCCapture_Device_PropertyInfo_defaultValue_get(swigCPtr, this);
        }
      
        public void setAutomatic(int value) {
          realsenseJNI.PXCCapture_Device_PropertyInfo_automatic_set(swigCPtr, this, value);
        }
      
        public int getAutomatic() {
          return realsenseJNI.PXCCapture_Device_PropertyInfo_automatic_get(swigCPtr, this);
        }
      
        public void setReserved(SWIGTYPE_p_int value) {
          realsenseJNI.PXCCapture_Device_PropertyInfo_reserved_set(swigCPtr, this, SWIGTYPE_p_int.getCPtr(value));
        }
      
        public SWIGTYPE_p_int getReserved() {
          long cPtr = realsenseJNI.PXCCapture_Device_PropertyInfo_reserved_get(swigCPtr, this);
          return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
        }
      
        public PropertyInfo() {
          this(realsenseJNI.new_PXCCapture_Device_PropertyInfo(), true);
        }
      
      }
  
    public int QueryStreamProfileSetNum(PXCCapture.StreamType scope) {
      return realsenseJNI.PXCCapture_Device_QueryStreamProfileSetNum(swigCPtr, this, scope.swigValue());
    }
  
    public pxcStatus QueryStreamProfileSet(PXCCapture.StreamType scope, int index, PXCCapture.Device.StreamProfileSet profiles) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_QueryStreamProfileSet__SWIG_0(swigCPtr, this, scope.swigValue(), index, PXCCapture.Device.StreamProfileSet.getCPtr(profiles), profiles));
    }
  
    public pxcStatus QueryStreamProfileSet(PXCCapture.Device.StreamProfileSet profiles) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_QueryStreamProfileSet__SWIG_1(swigCPtr, this, PXCCapture.Device.StreamProfileSet.getCPtr(profiles), profiles));
    }
  
    public int IsStreamProfileSetValid(PXCCapture.Device.StreamProfileSet profiles) {
      return realsenseJNI.PXCCapture_Device_IsStreamProfileSetValid(swigCPtr, this, PXCCapture.Device.StreamProfileSet.getCPtr(profiles), profiles);
    }
  
    public pxcStatus SetStreamProfileSet(PXCCapture.Device.StreamProfileSet profiles) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetStreamProfileSet(swigCPtr, this, PXCCapture.Device.StreamProfileSet.getCPtr(profiles), profiles));
    }
  
    public pxcStatus ReadStreamsAsync(PXCCapture.StreamType scope, PXCCapture.Sample sample, SWIGTYPE_p_p_PXCSyncPoint sp) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_ReadStreamsAsync__SWIG_0(swigCPtr, this, scope.swigValue(), PXCCapture.Sample.getCPtr(sample), sample, SWIGTYPE_p_p_PXCSyncPoint.getCPtr(sp)));
    }
  
    public pxcStatus ReadStreamsAsync(PXCCapture.Sample sample, SWIGTYPE_p_p_PXCSyncPoint sp) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_ReadStreamsAsync__SWIG_1(swigCPtr, this, PXCCapture.Sample.getCPtr(sample), sample, SWIGTYPE_p_p_PXCSyncPoint.getCPtr(sp)));
    }
  
    public pxcStatus ReadStreams(PXCCapture.StreamType scope, PXCCapture.Sample sample) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_ReadStreams(swigCPtr, this, scope.swigValue(), PXCCapture.Sample.getCPtr(sample), sample));
    }
  
    public int QueryColorExposure() {
      return realsenseJNI.PXCCapture_Device_QueryColorExposure(swigCPtr, this);
    }
  
    public PXCCapture.Device.PropertyInfo QueryColorExposureInfo() {
      return new PXCCapture.Device.PropertyInfo(realsenseJNI.PXCCapture_Device_QueryColorExposureInfo(swigCPtr, this), true);
    }
  
    public pxcStatus SetColorExposure(int value) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetColorExposure(swigCPtr, this, value));
    }
  
    public pxcStatus SetColorAutoExposure(int auto1) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetColorAutoExposure(swigCPtr, this, auto1));
    }
  
    public int QueryColorBrightness() {
      return realsenseJNI.PXCCapture_Device_QueryColorBrightness(swigCPtr, this);
    }
  
    public PXCCapture.Device.PropertyInfo QueryColorBrightnessInfo() {
      return new PXCCapture.Device.PropertyInfo(realsenseJNI.PXCCapture_Device_QueryColorBrightnessInfo(swigCPtr, this), true);
    }
  
    public pxcStatus SetColorBrightness(int value) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetColorBrightness(swigCPtr, this, value));
    }
  
    public int QueryColorContrast() {
      return realsenseJNI.PXCCapture_Device_QueryColorContrast(swigCPtr, this);
    }
  
    public PXCCapture.Device.PropertyInfo QueryColorContrastInfo() {
      return new PXCCapture.Device.PropertyInfo(realsenseJNI.PXCCapture_Device_QueryColorContrastInfo(swigCPtr, this), true);
    }
  
    public pxcStatus SetColorContrast(int value) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetColorContrast(swigCPtr, this, value));
    }
  
    public int QueryColorSaturation() {
      return realsenseJNI.PXCCapture_Device_QueryColorSaturation(swigCPtr, this);
    }
  
    public PXCCapture.Device.PropertyInfo QueryColorSaturationInfo() {
      return new PXCCapture.Device.PropertyInfo(realsenseJNI.PXCCapture_Device_QueryColorSaturationInfo(swigCPtr, this), true);
    }
  
    public pxcStatus SetColorSaturation(int value) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetColorSaturation(swigCPtr, this, value));
    }
  
    public int QueryColorHue() {
      return realsenseJNI.PXCCapture_Device_QueryColorHue(swigCPtr, this);
    }
  
    public PXCCapture.Device.PropertyInfo QueryColorHueInfo() {
      return new PXCCapture.Device.PropertyInfo(realsenseJNI.PXCCapture_Device_QueryColorHueInfo(swigCPtr, this), true);
    }
  
    public pxcStatus SetColorHue(int value) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetColorHue(swigCPtr, this, value));
    }
  
    public int QueryColorGamma() {
      return realsenseJNI.PXCCapture_Device_QueryColorGamma(swigCPtr, this);
    }
  
    public PXCCapture.Device.PropertyInfo QueryColorGammaInfo() {
      return new PXCCapture.Device.PropertyInfo(realsenseJNI.PXCCapture_Device_QueryColorGammaInfo(swigCPtr, this), true);
    }
  
    public pxcStatus SetColorGamma(int value) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetColorGamma(swigCPtr, this, value));
    }
  
    public int QueryColorWhiteBalance() {
      return realsenseJNI.PXCCapture_Device_QueryColorWhiteBalance(swigCPtr, this);
    }
  
    public PXCCapture.Device.PropertyInfo QueryColorWhiteBalanceInfo() {
      return new PXCCapture.Device.PropertyInfo(realsenseJNI.PXCCapture_Device_QueryColorWhiteBalanceInfo(swigCPtr, this), true);
    }
  
    public pxcStatus SetColorWhiteBalance(int value) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetColorWhiteBalance(swigCPtr, this, value));
    }
  
    public pxcStatus SetColorAutoWhiteBalance(int auto1) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetColorAutoWhiteBalance(swigCPtr, this, auto1));
    }
  
    public int QueryColorSharpness() {
      return realsenseJNI.PXCCapture_Device_QueryColorSharpness(swigCPtr, this);
    }
  
    public PXCCapture.Device.PropertyInfo QueryColorSharpnessInfo() {
      return new PXCCapture.Device.PropertyInfo(realsenseJNI.PXCCapture_Device_QueryColorSharpnessInfo(swigCPtr, this), true);
    }
  
    public pxcStatus SetColorSharpness(int value) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetColorSharpness(swigCPtr, this, value));
    }
  
    public int QueryColorBackLightCompensation() {
      return realsenseJNI.PXCCapture_Device_QueryColorBackLightCompensation(swigCPtr, this);
    }
  
    public PXCCapture.Device.PropertyInfo QueryColorBackLightCompensationInfo() {
      return new PXCCapture.Device.PropertyInfo(realsenseJNI.PXCCapture_Device_QueryColorBackLightCompensationInfo(swigCPtr, this), true);
    }
  
    public pxcStatus SetColorBackLightCompensation(int value) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetColorBackLightCompensation(swigCPtr, this, value));
    }
  
    public int QueryColorGain() {
      return realsenseJNI.PXCCapture_Device_QueryColorGain(swigCPtr, this);
    }
  
    public PXCCapture.Device.PropertyInfo QueryColorGainInfo() {
      return new PXCCapture.Device.PropertyInfo(realsenseJNI.PXCCapture_Device_QueryColorGainInfo(swigCPtr, this), true);
    }
  
    public pxcStatus SetColorGain(int value) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetColorGain(swigCPtr, this, value));
    }
  
    public PXCCapture.PowerLineFrequency QueryColorPowerLineFrequency() {
      return PXCCapture.PowerLineFrequency.swigToEnum(realsenseJNI.PXCCapture_Device_QueryColorPowerLineFrequency(swigCPtr, this));
    }
  
    public pxcStatus SetColorPowerLineFrequency(PXCCapture.PowerLineFrequency value) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetColorPowerLineFrequency(swigCPtr, this, value.swigValue()));
    }
  
    public PXCPointF32 QueryColorFieldOfView() {
      return new PXCPointF32(realsenseJNI.PXCCapture_Device_QueryColorFieldOfView(swigCPtr, this), true);
    }
  
    public PXCPointF32 QueryColorFocalLength() {
      return new PXCPointF32(realsenseJNI.PXCCapture_Device_QueryColorFocalLength(swigCPtr, this), true);
    }
  
    public float QueryColorFocalLengthMM() {
      return realsenseJNI.PXCCapture_Device_QueryColorFocalLengthMM(swigCPtr, this);
    }
  
    public PXCPointF32 QueryColorPrincipalPoint() {
      return new PXCPointF32(realsenseJNI.PXCCapture_Device_QueryColorPrincipalPoint(swigCPtr, this), true);
    }
  
    public int QueryDepthLowConfidenceValue() {
      return realsenseJNI.PXCCapture_Device_QueryDepthLowConfidenceValue(swigCPtr, this);
    }
  
    public short QueryDepthConfidenceThreshold() {
      return realsenseJNI.PXCCapture_Device_QueryDepthConfidenceThreshold(swigCPtr, this);
    }
  
    public PXCCapture.Device.PropertyInfo QueryDepthConfidenceThresholdInfo() {
      return new PXCCapture.Device.PropertyInfo(realsenseJNI.PXCCapture_Device_QueryDepthConfidenceThresholdInfo(swigCPtr, this), true);
    }
  
    public pxcStatus SetDepthConfidenceThreshold(short value) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetDepthConfidenceThreshold(swigCPtr, this, value));
    }
  
    public float QueryDepthUnit() {
      return realsenseJNI.PXCCapture_Device_QueryDepthUnit(swigCPtr, this);
    }
  
    public PXCPointF32 QueryDepthFieldOfView() {
      return new PXCPointF32(realsenseJNI.PXCCapture_Device_QueryDepthFieldOfView(swigCPtr, this), true);
    }
  
    public PXCRangeF32 QueryDepthSensorRange() {
      return new PXCRangeF32(realsenseJNI.PXCCapture_Device_QueryDepthSensorRange(swigCPtr, this), true);
    }
  
    public PXCPointF32 QueryDepthFocalLength() {
      return new PXCPointF32(realsenseJNI.PXCCapture_Device_QueryDepthFocalLength(swigCPtr, this), true);
    }
  
    public float QueryDepthFocalLengthMM() {
      return realsenseJNI.PXCCapture_Device_QueryDepthFocalLengthMM(swigCPtr, this);
    }
  
    public PXCPointF32 QueryDepthPrincipalPoint() {
      return new PXCPointF32(realsenseJNI.PXCCapture_Device_QueryDepthPrincipalPoint(swigCPtr, this), true);
    }
  
    public int QueryDeviceAllowProfileChange() {
      return realsenseJNI.PXCCapture_Device_QueryDeviceAllowProfileChange(swigCPtr, this);
    }
  
    public pxcStatus SetDeviceAllowProfileChange(int value) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetDeviceAllowProfileChange(swigCPtr, this, value));
    }
  
    public PXCCapture.MirrorMode QueryMirrorMode() {
      return PXCCapture.MirrorMode.swigToEnum(realsenseJNI.PXCCapture_Device_QueryMirrorMode(swigCPtr, this));
    }
  
    public pxcStatus SetMirrorMode(PXCCapture.MirrorMode value) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetMirrorMode(swigCPtr, this, value.swigValue()));
    }
  
    public int QueryIVCAMLaserPower() {
      return realsenseJNI.PXCCapture_Device_QueryIVCAMLaserPower(swigCPtr, this);
    }
  
    public PXCCapture.Device.PropertyInfo QueryIVCAMLaserPowerInfo() {
      return new PXCCapture.Device.PropertyInfo(realsenseJNI.PXCCapture_Device_QueryIVCAMLaserPowerInfo(swigCPtr, this), true);
    }
  
    public pxcStatus SetIVCAMLaserPower(int value) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetIVCAMLaserPower(swigCPtr, this, value));
    }
  
    public PXCCapture.IVCAMAccuracy QueryIVCAMAccuracy() {
      return PXCCapture.IVCAMAccuracy.swigToEnum(realsenseJNI.PXCCapture_Device_QueryIVCAMAccuracy(swigCPtr, this));
    }
  
    public pxcStatus SetIVCAMAccuracy(PXCCapture.IVCAMAccuracy value) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetIVCAMAccuracy(swigCPtr, this, value.swigValue()));
    }
  
    public int QueryIVCAMFilterOption() {
      return realsenseJNI.PXCCapture_Device_QueryIVCAMFilterOption(swigCPtr, this);
    }
  
    public PXCCapture.Device.PropertyInfo QueryIVCAMFilterOptionInfo() {
      return new PXCCapture.Device.PropertyInfo(realsenseJNI.PXCCapture_Device_QueryIVCAMFilterOptionInfo(swigCPtr, this), true);
    }
  
    public pxcStatus SetIVCAMFilterOption(int value) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetIVCAMFilterOption(swigCPtr, this, value));
    }
  
    public int QueryIVCAMMotionRangeTradeOff() {
      return realsenseJNI.PXCCapture_Device_QueryIVCAMMotionRangeTradeOff(swigCPtr, this);
    }
  
    public PXCCapture.Device.PropertyInfo QueryIVCAMMotionRangeTradeOffInfo() {
      return new PXCCapture.Device.PropertyInfo(realsenseJNI.PXCCapture_Device_QueryIVCAMMotionRangeTradeOffInfo(swigCPtr, this), true);
    }
  
    public pxcStatus SetIVCAMMotionRangeTradeOff(int value) {
      return pxcStatus.swigToEnum(realsenseJNI.PXCCapture_Device_SetIVCAMMotionRangeTradeOff(swigCPtr, this, value));
    }
  
  }

  public final static int STREAM_LIMIT = realsenseJNI.PXCCapture_STREAM_LIMIT_get();

  public final static class StreamType {
    public final static PXCCapture.StreamType STREAM_TYPE_ANY = new PXCCapture.StreamType("STREAM_TYPE_ANY", realsenseJNI.PXCCapture_STREAM_TYPE_ANY_get());
    public final static PXCCapture.StreamType STREAM_TYPE_COLOR = new PXCCapture.StreamType("STREAM_TYPE_COLOR", realsenseJNI.PXCCapture_STREAM_TYPE_COLOR_get());
    public final static PXCCapture.StreamType STREAM_TYPE_DEPTH = new PXCCapture.StreamType("STREAM_TYPE_DEPTH", realsenseJNI.PXCCapture_STREAM_TYPE_DEPTH_get());
    public final static PXCCapture.StreamType STREAM_TYPE_IR = new PXCCapture.StreamType("STREAM_TYPE_IR", realsenseJNI.PXCCapture_STREAM_TYPE_IR_get());
    public final static PXCCapture.StreamType STREAM_TYPE_LEFT = new PXCCapture.StreamType("STREAM_TYPE_LEFT", realsenseJNI.PXCCapture_STREAM_TYPE_LEFT_get());
    public final static PXCCapture.StreamType STREAM_TYPE_RIGHT = new PXCCapture.StreamType("STREAM_TYPE_RIGHT", realsenseJNI.PXCCapture_STREAM_TYPE_RIGHT_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static StreamType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + StreamType.class + " with value " + swigValue);
    }

    private StreamType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private StreamType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private StreamType(String swigName, StreamType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static StreamType[] swigValues = { STREAM_TYPE_ANY, STREAM_TYPE_COLOR, STREAM_TYPE_DEPTH, STREAM_TYPE_IR, STREAM_TYPE_LEFT, STREAM_TYPE_RIGHT };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class DeviceModel {
    public final static PXCCapture.DeviceModel DEVICE_MODEL_GENERIC = new PXCCapture.DeviceModel("DEVICE_MODEL_GENERIC", realsenseJNI.PXCCapture_DEVICE_MODEL_GENERIC_get());
    public final static PXCCapture.DeviceModel DEVICE_MODEL_IVCAM = new PXCCapture.DeviceModel("DEVICE_MODEL_IVCAM", realsenseJNI.PXCCapture_DEVICE_MODEL_IVCAM_get());
    public final static PXCCapture.DeviceModel DEVICE_MODEL_DS4 = new PXCCapture.DeviceModel("DEVICE_MODEL_DS4", realsenseJNI.PXCCapture_DEVICE_MODEL_DS4_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static DeviceModel swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + DeviceModel.class + " with value " + swigValue);
    }

    private DeviceModel(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private DeviceModel(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private DeviceModel(String swigName, DeviceModel swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static DeviceModel[] swigValues = { DEVICE_MODEL_GENERIC, DEVICE_MODEL_IVCAM, DEVICE_MODEL_DS4 };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class DeviceOrientation {
    public final static PXCCapture.DeviceOrientation DEVICE_ORIENTATION_ANY = new PXCCapture.DeviceOrientation("DEVICE_ORIENTATION_ANY", realsenseJNI.PXCCapture_DEVICE_ORIENTATION_ANY_get());
    public final static PXCCapture.DeviceOrientation DEVICE_ORIENTATION_USER_FACING = new PXCCapture.DeviceOrientation("DEVICE_ORIENTATION_USER_FACING", realsenseJNI.PXCCapture_DEVICE_ORIENTATION_USER_FACING_get());
    public final static PXCCapture.DeviceOrientation DEVICE_ORIENTATION_WORLD_FACING = new PXCCapture.DeviceOrientation("DEVICE_ORIENTATION_WORLD_FACING", realsenseJNI.PXCCapture_DEVICE_ORIENTATION_WORLD_FACING_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static DeviceOrientation swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + DeviceOrientation.class + " with value " + swigValue);
    }

    private DeviceOrientation(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private DeviceOrientation(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private DeviceOrientation(String swigName, DeviceOrientation swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static DeviceOrientation[] swigValues = { DEVICE_ORIENTATION_ANY, DEVICE_ORIENTATION_USER_FACING, DEVICE_ORIENTATION_WORLD_FACING };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class PowerLineFrequency {
    public final static PXCCapture.PowerLineFrequency POWER_LINE_FREQUENCY_DISABLED = new PXCCapture.PowerLineFrequency("POWER_LINE_FREQUENCY_DISABLED", realsenseJNI.PXCCapture_POWER_LINE_FREQUENCY_DISABLED_get());
    public final static PXCCapture.PowerLineFrequency POWER_LINE_FREQUENCY_50HZ = new PXCCapture.PowerLineFrequency("POWER_LINE_FREQUENCY_50HZ", realsenseJNI.PXCCapture_POWER_LINE_FREQUENCY_50HZ_get());
    public final static PXCCapture.PowerLineFrequency POWER_LINE_FREQUENCY_60HZ = new PXCCapture.PowerLineFrequency("POWER_LINE_FREQUENCY_60HZ", realsenseJNI.PXCCapture_POWER_LINE_FREQUENCY_60HZ_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static PowerLineFrequency swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + PowerLineFrequency.class + " with value " + swigValue);
    }

    private PowerLineFrequency(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private PowerLineFrequency(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private PowerLineFrequency(String swigName, PowerLineFrequency swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static PowerLineFrequency[] swigValues = { POWER_LINE_FREQUENCY_DISABLED, POWER_LINE_FREQUENCY_50HZ, POWER_LINE_FREQUENCY_60HZ };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class MirrorMode {
    public final static PXCCapture.MirrorMode MIRROR_MODE_DISABLED = new PXCCapture.MirrorMode("MIRROR_MODE_DISABLED", realsenseJNI.PXCCapture_MIRROR_MODE_DISABLED_get());
    public final static PXCCapture.MirrorMode MIRROR_MODE_HORIZONTAL = new PXCCapture.MirrorMode("MIRROR_MODE_HORIZONTAL", realsenseJNI.PXCCapture_MIRROR_MODE_HORIZONTAL_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static MirrorMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + MirrorMode.class + " with value " + swigValue);
    }

    private MirrorMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private MirrorMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private MirrorMode(String swigName, MirrorMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static MirrorMode[] swigValues = { MIRROR_MODE_DISABLED, MIRROR_MODE_HORIZONTAL };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class IVCAMAccuracy {
    public final static PXCCapture.IVCAMAccuracy IVCAM_ACCURACY_FINEST = new PXCCapture.IVCAMAccuracy("IVCAM_ACCURACY_FINEST", realsenseJNI.PXCCapture_IVCAM_ACCURACY_FINEST_get());
    public final static PXCCapture.IVCAMAccuracy IVCAM_ACCURACY_MEDIAN = new PXCCapture.IVCAMAccuracy("IVCAM_ACCURACY_MEDIAN", realsenseJNI.PXCCapture_IVCAM_ACCURACY_MEDIAN_get());
    public final static PXCCapture.IVCAMAccuracy IVCAM_ACCURACY_COARSE = new PXCCapture.IVCAMAccuracy("IVCAM_ACCURACY_COARSE", realsenseJNI.PXCCapture_IVCAM_ACCURACY_COARSE_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static IVCAMAccuracy swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + IVCAMAccuracy.class + " with value " + swigValue);
    }

    private IVCAMAccuracy(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private IVCAMAccuracy(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private IVCAMAccuracy(String swigName, IVCAMAccuracy swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static IVCAMAccuracy[] swigValues = { IVCAM_ACCURACY_FINEST, IVCAM_ACCURACY_MEDIAN, IVCAM_ACCURACY_COARSE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Property {
    public final static PXCCapture.Property PROPERTY_COLOR_EXPOSURE = new PXCCapture.Property("PROPERTY_COLOR_EXPOSURE", realsenseJNI.PXCCapture_PROPERTY_COLOR_EXPOSURE_get());
    public final static PXCCapture.Property PROPERTY_COLOR_BRIGHTNESS = new PXCCapture.Property("PROPERTY_COLOR_BRIGHTNESS", realsenseJNI.PXCCapture_PROPERTY_COLOR_BRIGHTNESS_get());
    public final static PXCCapture.Property PROPERTY_COLOR_CONTRAST = new PXCCapture.Property("PROPERTY_COLOR_CONTRAST", realsenseJNI.PXCCapture_PROPERTY_COLOR_CONTRAST_get());
    public final static PXCCapture.Property PROPERTY_COLOR_SATURATION = new PXCCapture.Property("PROPERTY_COLOR_SATURATION", realsenseJNI.PXCCapture_PROPERTY_COLOR_SATURATION_get());
    public final static PXCCapture.Property PROPERTY_COLOR_HUE = new PXCCapture.Property("PROPERTY_COLOR_HUE", realsenseJNI.PXCCapture_PROPERTY_COLOR_HUE_get());
    public final static PXCCapture.Property PROPERTY_COLOR_GAMMA = new PXCCapture.Property("PROPERTY_COLOR_GAMMA", realsenseJNI.PXCCapture_PROPERTY_COLOR_GAMMA_get());
    public final static PXCCapture.Property PROPERTY_COLOR_WHITE_BALANCE = new PXCCapture.Property("PROPERTY_COLOR_WHITE_BALANCE", realsenseJNI.PXCCapture_PROPERTY_COLOR_WHITE_BALANCE_get());
    public final static PXCCapture.Property PROPERTY_COLOR_SHARPNESS = new PXCCapture.Property("PROPERTY_COLOR_SHARPNESS", realsenseJNI.PXCCapture_PROPERTY_COLOR_SHARPNESS_get());
    public final static PXCCapture.Property PROPERTY_COLOR_BACK_LIGHT_COMPENSATION = new PXCCapture.Property("PROPERTY_COLOR_BACK_LIGHT_COMPENSATION", realsenseJNI.PXCCapture_PROPERTY_COLOR_BACK_LIGHT_COMPENSATION_get());
    public final static PXCCapture.Property PROPERTY_COLOR_GAIN = new PXCCapture.Property("PROPERTY_COLOR_GAIN", realsenseJNI.PXCCapture_PROPERTY_COLOR_GAIN_get());
    public final static PXCCapture.Property PROPERTY_COLOR_POWER_LINE_FREQUENCY = new PXCCapture.Property("PROPERTY_COLOR_POWER_LINE_FREQUENCY", realsenseJNI.PXCCapture_PROPERTY_COLOR_POWER_LINE_FREQUENCY_get());
    public final static PXCCapture.Property PROPERTY_COLOR_FOCAL_LENGTH_MM = new PXCCapture.Property("PROPERTY_COLOR_FOCAL_LENGTH_MM", realsenseJNI.PXCCapture_PROPERTY_COLOR_FOCAL_LENGTH_MM_get());
    public final static PXCCapture.Property PROPERTY_COLOR_FIELD_OF_VIEW = new PXCCapture.Property("PROPERTY_COLOR_FIELD_OF_VIEW", realsenseJNI.PXCCapture_PROPERTY_COLOR_FIELD_OF_VIEW_get());
    public final static PXCCapture.Property PROPERTY_COLOR_FOCAL_LENGTH = new PXCCapture.Property("PROPERTY_COLOR_FOCAL_LENGTH", realsenseJNI.PXCCapture_PROPERTY_COLOR_FOCAL_LENGTH_get());
    public final static PXCCapture.Property PROPERTY_COLOR_PRINCIPAL_POINT = new PXCCapture.Property("PROPERTY_COLOR_PRINCIPAL_POINT", realsenseJNI.PXCCapture_PROPERTY_COLOR_PRINCIPAL_POINT_get());
    public final static PXCCapture.Property PROPERTY_DEPTH_LOW_CONFIDENCE_VALUE = new PXCCapture.Property("PROPERTY_DEPTH_LOW_CONFIDENCE_VALUE", realsenseJNI.PXCCapture_PROPERTY_DEPTH_LOW_CONFIDENCE_VALUE_get());
    public final static PXCCapture.Property PROPERTY_DEPTH_CONFIDENCE_THRESHOLD = new PXCCapture.Property("PROPERTY_DEPTH_CONFIDENCE_THRESHOLD", realsenseJNI.PXCCapture_PROPERTY_DEPTH_CONFIDENCE_THRESHOLD_get());
    public final static PXCCapture.Property PROPERTY_DEPTH_UNIT = new PXCCapture.Property("PROPERTY_DEPTH_UNIT", realsenseJNI.PXCCapture_PROPERTY_DEPTH_UNIT_get());
    public final static PXCCapture.Property PROPERTY_DEPTH_FOCAL_LENGTH_MM = new PXCCapture.Property("PROPERTY_DEPTH_FOCAL_LENGTH_MM", realsenseJNI.PXCCapture_PROPERTY_DEPTH_FOCAL_LENGTH_MM_get());
    public final static PXCCapture.Property PROPERTY_DEPTH_FIELD_OF_VIEW = new PXCCapture.Property("PROPERTY_DEPTH_FIELD_OF_VIEW", realsenseJNI.PXCCapture_PROPERTY_DEPTH_FIELD_OF_VIEW_get());
    public final static PXCCapture.Property PROPERTY_DEPTH_SENSOR_RANGE = new PXCCapture.Property("PROPERTY_DEPTH_SENSOR_RANGE", realsenseJNI.PXCCapture_PROPERTY_DEPTH_SENSOR_RANGE_get());
    public final static PXCCapture.Property PROPERTY_DEPTH_FOCAL_LENGTH = new PXCCapture.Property("PROPERTY_DEPTH_FOCAL_LENGTH", realsenseJNI.PXCCapture_PROPERTY_DEPTH_FOCAL_LENGTH_get());
    public final static PXCCapture.Property PROPERTY_DEPTH_PRINCIPAL_POINT = new PXCCapture.Property("PROPERTY_DEPTH_PRINCIPAL_POINT", realsenseJNI.PXCCapture_PROPERTY_DEPTH_PRINCIPAL_POINT_get());
    public final static PXCCapture.Property PROPERTY_DEVICE_ALLOW_PROFILE_CHANGE = new PXCCapture.Property("PROPERTY_DEVICE_ALLOW_PROFILE_CHANGE", realsenseJNI.PXCCapture_PROPERTY_DEVICE_ALLOW_PROFILE_CHANGE_get());
    public final static PXCCapture.Property PROPERTY_DEVICE_MIRROR = new PXCCapture.Property("PROPERTY_DEVICE_MIRROR", realsenseJNI.PXCCapture_PROPERTY_DEVICE_MIRROR_get());
    public final static PXCCapture.Property PROPERTY_PROJECTION_SERIALIZABLE = new PXCCapture.Property("PROPERTY_PROJECTION_SERIALIZABLE", realsenseJNI.PXCCapture_PROPERTY_PROJECTION_SERIALIZABLE_get());
    public final static PXCCapture.Property PROPERTY_IVCAM_LASER_POWER = new PXCCapture.Property("PROPERTY_IVCAM_LASER_POWER", realsenseJNI.PXCCapture_PROPERTY_IVCAM_LASER_POWER_get());
    public final static PXCCapture.Property PROPERTY_IVCAM_ACCURACY = new PXCCapture.Property("PROPERTY_IVCAM_ACCURACY", realsenseJNI.PXCCapture_PROPERTY_IVCAM_ACCURACY_get());
    public final static PXCCapture.Property PROPERTY_IVCAM_FILTER_OPTION = new PXCCapture.Property("PROPERTY_IVCAM_FILTER_OPTION", realsenseJNI.PXCCapture_PROPERTY_IVCAM_FILTER_OPTION_get());
    public final static PXCCapture.Property PROPERTY_IVCAM_MOTION_RANGE_TRADE_OFF = new PXCCapture.Property("PROPERTY_IVCAM_MOTION_RANGE_TRADE_OFF", realsenseJNI.PXCCapture_PROPERTY_IVCAM_MOTION_RANGE_TRADE_OFF_get());
    public final static PXCCapture.Property PROPERTY_CUSTOMIZED = new PXCCapture.Property("PROPERTY_CUSTOMIZED", realsenseJNI.PXCCapture_PROPERTY_CUSTOMIZED_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Property swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Property.class + " with value " + swigValue);
    }

    private Property(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Property(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Property(String swigName, Property swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Property[] swigValues = { PROPERTY_COLOR_EXPOSURE, PROPERTY_COLOR_BRIGHTNESS, PROPERTY_COLOR_CONTRAST, PROPERTY_COLOR_SATURATION, PROPERTY_COLOR_HUE, PROPERTY_COLOR_GAMMA, PROPERTY_COLOR_WHITE_BALANCE, PROPERTY_COLOR_SHARPNESS, PROPERTY_COLOR_BACK_LIGHT_COMPENSATION, PROPERTY_COLOR_GAIN, PROPERTY_COLOR_POWER_LINE_FREQUENCY, PROPERTY_COLOR_FOCAL_LENGTH_MM, PROPERTY_COLOR_FIELD_OF_VIEW, PROPERTY_COLOR_FOCAL_LENGTH, PROPERTY_COLOR_PRINCIPAL_POINT, PROPERTY_DEPTH_LOW_CONFIDENCE_VALUE, PROPERTY_DEPTH_CONFIDENCE_THRESHOLD, PROPERTY_DEPTH_UNIT, PROPERTY_DEPTH_FOCAL_LENGTH_MM, PROPERTY_DEPTH_FIELD_OF_VIEW, PROPERTY_DEPTH_SENSOR_RANGE, PROPERTY_DEPTH_FOCAL_LENGTH, PROPERTY_DEPTH_PRINCIPAL_POINT, PROPERTY_DEVICE_ALLOW_PROFILE_CHANGE, PROPERTY_DEVICE_MIRROR, PROPERTY_PROJECTION_SERIALIZABLE, PROPERTY_IVCAM_LASER_POWER, PROPERTY_IVCAM_ACCURACY, PROPERTY_IVCAM_FILTER_OPTION, PROPERTY_IVCAM_MOTION_RANGE_TRADE_OFF, PROPERTY_CUSTOMIZED };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
